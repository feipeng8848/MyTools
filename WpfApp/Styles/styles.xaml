<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:views="clr-namespace:ticktick_WPF.Views" 
                    xmlns:converter="clr-namespace:Converter" 
                    xmlns:system="clr-namespace:System;assembly=mscorlib" 
                    xmlns:resource="clr-namespace:ticktick_WPF.Resource" 
                    xmlns:properties="clr-namespace:Properties">
  <FontFamily x:Key="mFontFamily">Microsoft YaHei UI</FontFamily>
  <BitmapImage x:Key="EmptyTodayB1B2">pack://application:,,,/Assets/EmptyImages/TodayB1B2.png</BitmapImage>
  <BitmapImage x:Key="EmptyTodayB3">pack://application:,,,/Assets/EmptyImages/TodayB3.png</BitmapImage>
  <BitmapImage x:Key="EmptyTodayB4B5">pack://application:,,,/Assets/EmptyImages/TodayB4B5.png</BitmapImage>
  <BitmapImage x:Key="EmptyTodayB6">pack://application:,,,/Assets/EmptyImages/TodayB6.png</BitmapImage>
  <BitmapImage x:Key="EmptyTomorrowB1">pack://application:,,,/Assets/EmptyImages/TomorrowB1.png</BitmapImage>
  <BitmapImage x:Key="EmptyTomorrowB2">pack://application:,,,/Assets/EmptyImages/TomorrowB2.png</BitmapImage>
  <BitmapImage x:Key="EmptyNext7Days">pack://application:,,,/Assets/EmptyImages/WeekProject.png</BitmapImage>
  <BitmapImage x:Key="EmptyAssignToMe">pack://application:,,,/Assets/EmptyImages/Assign.png</BitmapImage>
  <BitmapImage x:Key="EmptyTrash">pack://application:,,,/Assets/EmptyImages/Trash.png</BitmapImage>
  <BitmapImage x:Key="EmptyCalendar">pack://application:,,,/Assets/EmptyImages/Calendar.png</BitmapImage>
  <BitmapImage x:Key="EmptyFilter">pack://application:,,,/Assets/EmptyImages/CSL.png</BitmapImage>
  <BitmapImage x:Key="EmptyAll">pack://application:,,,/Assets/EmptyImages/EmptyAll.png</BitmapImage>
  <BitmapImage x:Key="EmptyCompleted">pack://application:,,,/Assets/EmptyImages/EmptyCompleted.png</BitmapImage>
  <BitmapImage x:Key="EmptyInbox">pack://application:,,,/Assets/EmptyImages/EmptyInbox.png</BitmapImage>
  <BitmapImage x:Key="EmptyProject">pack://application:,,,/Assets/EmptyImages/EmptyProject.png</BitmapImage>
  <BitmapImage x:Key="EmptySearchResult">pack://application:,,,/Assets/EmptyImages/SearchResult.png</BitmapImage>
  <BitmapImage x:Key="EmptyTag">pack://application:,,,/Assets/EmptyImages/EmptyTag.png</BitmapImage>
  <BitmapImage x:Key="EmptyDetail">pack://application:,,,/Assets/EmptyImages/NoDetails2.png</BitmapImage>
  <system:String x:Key="ImgSpring">pack://application:,,,/Assets/Theme/Spring.png</system:String>
  <system:String x:Key="ImgSummer">pack://application:,,,/Assets/Theme/Summer.png</system:String>
  <system:String x:Key="ImgAutumn">pack://application:,,,/Assets/Theme/Autumn.png</system:String>
  <system:String x:Key="ImgWinter">pack://application:,,,/Assets/Theme/Winter.png</system:String>
  <system:String x:Key="ImgBeijing">pack://application:,,,/Assets/Theme/Beijing.png</system:String>
  <system:String x:Key="ImgHangzhou">pack://application:,,,/Assets/Theme/Hangzhou.png</system:String>
  <system:String x:Key="ImgLondon">pack://application:,,,/Assets/Theme/London.png</system:String>
  <system:String x:Key="ImgMoscow">pack://application:,,,/Assets/Theme/Moscow.png</system:String>
  <system:String x:Key="ImgSfo">pack://application:,,,/Assets/Theme/Sfo.png</system:String>
  <system:String x:Key="ImgSeoul">pack://application:,,,/Assets/Theme/Seoul.png</system:String>
  <system:String x:Key="ImgShanghai">pack://application:,,,/Assets/Theme/Shanghai.png</system:String>
  <system:String x:Key="ImgSydney">pack://application:,,,/Assets/Theme/Sydney.png</system:String>
  <system:String x:Key="ImgTokyo">pack://application:,,,/Assets/Theme/Tokyo.png</system:String>
  <system:String x:Key="SpringBackground">pack://application:,,,/Assets/Theme/spring_background.png</system:String>
  <system:String x:Key="SummerBackground">pack://application:,,,/Assets/Theme/summer_background.png</system:String>
  <system:String x:Key="AutumnBackground">pack://application:,,,/Assets/Theme/autumn_background.png</system:String>
  <system:String x:Key="WinterBackground">pack://application:,,,/Assets/Theme/winter_background.png</system:String>
  <system:String x:Key="BeijingBackground">pack://application:,,,/Assets/Theme/beijing_background.png</system:String>
  <system:String x:Key="HangzhouBackground">pack://application:,,,/Assets/Theme/hangzhou_background.png</system:String>
  <system:String x:Key="LondonBackground">pack://application:,,,/Assets/Theme/london_background.png</system:String>
  <system:String x:Key="MoscowBackground">pack://application:,,,/Assets/Theme/moscow_background.png</system:String>
  <system:String x:Key="SanfranciscoBackground">pack://application:,,,/Assets/Theme/sanfrancisco_background.png</system:String>
  <system:String x:Key="SeoulBackground">pack://application:,,,/Assets/Theme/seoul_background.png</system:String>
  <system:String x:Key="ShanghaiBackground">pack://application:,,,/Assets/Theme/shanghai_background.png</system:String>
  <system:String x:Key="SydneyBackground">pack://application:,,,/Assets/Theme/sydney_background.png</system:String>
  <system:String x:Key="TokyoBackground">pack://application:,,,/Assets/Theme/tokyo_background.png</system:String>
  <system:String x:Key="ManageTeamUrl">/#team/{0}</system:String>
  <system:String x:Key="RenewTeamUrl">/#team/{0}?action=renew</system:String>
  <converter:WindowStyleConverter x:Key="WindowStyleConverter" />
  <converter:MaxWindowMarginConverter x:Key="MaxWindowMarginConverter" />
  <converter:ComoBoxMinWidth x:Key="ComoBoxMinWidth" />
  <converter:BoolVisibleConverter x:Key="BoolVisibleConverter" />
  <converter:IntVisibleConverter x:Key="IntVisibleConverter" />
  <converter:BoolInverseConverter x:Key="BoolInverseConverter" />
  <converter:BoolOrBoolConverter x:Key="BoolOrBoolConverter" />
  <converter:BoolSwitchConverter x:Key="BoolSwitchConverter" />
  <converter:VisibleConverter x:Key="VisibleConverter" />
  <converter:HiddenVisibleConverter x:Key="HiddenVisibleConverter" />
  <converter:InverseVisibleConverter x:Key="InverseVisibleConverter" />
  <converter:MathConverter x:Key="MathConverter" />
  <converter:HighlightIconConverter x:Key="HighlightIconConverter" />
  <converter:HighlightBackgroundConverter x:Key="HighlightBackgroundConverter" />
  <converter:StringNullOrEmptyToVisibilityConverter x:Key="StringNullOrEmptyToVisibilityConverter" />
  <converter:StringToVisibilityConverter x:Key="StringToVisibilityConverter" />
  <converter:BoolOrVisibilityConverter x:Key="MultiBooleanToVisibilityConverter" />
  <converter:BoolAndVisibilityConverter x:Key="BoolAndVisibilityConverter" />
  <converter:PositiveVisibilityConverter x:Key="PositiveVisibilityConverter" />
  <converter:PopupVeticalOffsetConverter x:Key="PopupVeticalOffsetConverter" />
  <converter:ColumnOpacityConverter x:Key="ColumnOpacityConverter" />
  <converter:KanbanBackgroundConverter x:Key="KanbanBackgroundConverter" />
  <converter:MultipleBoolVisibleConverter x:Key="MultipleBoolVisibleConverter" />
  <converter:TagCornerConverter x:Key="TagCornerConverter" />
  <Style x:Key="ContextMenuStyle" TargetType="{x:Type ContextMenu}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="Grid.IsSharedSizeScope" Value="True" />
    <Setter Property="ContextMenu.HasDropShadow" Value="True" />
    <Setter Property="MaxWidth" Value="250" />
    <Setter Property="Margin" Value="0,10" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Border Name="Border" Background="{TemplateBinding Background}" BorderThickness="10">
            <UIElement.Effect>
              <DropShadowEffect BlurRadius="10" Opacity="0.2" ShadowDepth="0" />
            </UIElement.Effect>
            <ScrollViewer Style="{DynamicResource for_scrollviewer}" Margin="0,8">
              <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="MenuItemItemControlTemplate" TargetType="{x:Type MenuItem}">
    <Border Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{DynamicResource PopupBackground}" SnapsToDevicePixels="True">
      <Grid Name="Grid">
        <Grid.ColumnDefinitions>
          <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto" />
          <ColumnDefinition Width="0" />
          <ColumnDefinition Width="*" MaxWidth="250" />
          <ColumnDefinition Width="30" />
          <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto" MaxWidth="250" />
          <ColumnDefinition Width="20" />
        </Grid.ColumnDefinitions>
        <ContentPresenter Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="16,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16" />
        <Border Name="GlyphPanel" BorderBrush="{DynamicResource TextBorderColor}" BorderThickness="0" Background="{DynamicResource PopupBackground}" ClipToBounds="False" HorizontalAlignment="Center" Height="22" Margin="-1,0,0,0" Visibility="Hidden" VerticalAlignment="Center" Width="22">
          <Path Name="Glyph" Data="F1 M10,1.2 L4.7,9.1 L4.5,9.1 L0,5.2 L1.3,3.5 L4.3,6.1 L8.3,0 L10,1.2" Fill="#FF000000" FlowDirection="LeftToRight" Height="11" Width="10" />
        </Border>
        <ContentPresenter Name="menuHeaderContainer" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="2" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
        <TextBlock Name="menuGestureText" Grid.Column="4" Margin="{TemplateBinding Padding}" Foreground="{DynamicResource TextColorPrimary}" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="MenuItem.Icon" Value="{x:Null}">
        <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="MenuItem.IsChecked" Value="True">
        <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="MenuItem.IsHighlighted" Value="True">
        <Setter TargetName="templateRoot" Value="{DynamicResource ItemHoverColor}" Property="Border.Background" />
        <Setter TargetName="templateRoot" Value="{DynamicResource ItemHoverColor}" Property="Border.BorderBrush" />
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="#00FFFFFF" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="MenuItem.IsHighlighted" Value="True" />
          <Condition Property="UIElement.IsEnabled" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="templateRoot" Value="{DynamicResource ItemHoverColor}" Property="Border.Background" />
        <Setter TargetName="templateRoot" Value="{DynamicResource ItemHoverColor}" Property="Border.BorderBrush" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="MenuItemGroupControlTemplate" TargetType="{x:Type MenuItem}">
    <Border Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource PopupBackground}" SnapsToDevicePixels="True">
      <Grid Name="Grid" Margin="-1" Background="#00FFFFFF">
        <Grid.ColumnDefinitions>
          <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto" />
          <ColumnDefinition Width="0" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="30" />
          <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto" />
          <ColumnDefinition Width="25" />
        </Grid.ColumnDefinitions>
        <ContentPresenter Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="16,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16" />
        <Border Name="GlyphPanel" Grid.Column="0" BorderBrush="#00FFFFFF" BorderThickness="1" Background="#00FFFFFF" Height="22" Margin="-1,0,0,0" Visibility="Hidden" VerticalAlignment="Center" Width="22">
          <Path Name="Glyph" Data="F1 M10,1.2 L4.7,9.1 L4.5,9.1 L0,5.2 L1.3,3.5 L4.3,6.1 L8.3,0 L10,1.2" Fill="{DynamicResource IconColorPrimary}" FlowDirection="LeftToRight" Height="11" Width="9" />
        </Border>
        <ContentPresenter Name="ContentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="2" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
        <TextBlock Name="TextBlock" Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center" />
        <Path Name="RightArrow" Grid.Column="5" Data="M0,0 L4,3.5 L0,7" Fill="{DynamicResource IconColorPrimary}" HorizontalAlignment="Left" Margin="10,0,5,0" VerticalAlignment="Center" />
        <Popup Name="PART_Popup" Grid.Column="0" AllowsTransparency="True" Focusable="False" PopupAnimation="{DynamicResource SystemParameters.MenuPopupAnimationKey}" Placement="Relative" VerticalOffset="-10" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" HorizontalOffset="{Binding ActualWidth, ConverterParameter=@VALUE-10, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MathConverter}}">
          <Border Name="SubMenuBorder" BorderThickness="1" Background="{DynamicResource Transparent}">
            <UIElement.Effect>
              <DropShadowEffect BlurRadius="6" Opacity="0.2" ShadowDepth="0" />
            </UIElement.Effect>
            <ScrollViewer Name="SubMenuScrollViewer" Margin="10" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
              <Grid Name="Grid1" RenderOptions.ClearTypeHint="Enabled" Background="{DynamicResource PopupBackground}">
                <Canvas Name="Canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                  <Rectangle Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}" />
                </Canvas>
                <Rectangle Name="Rectangle" Fill="#00FFFFFF" HorizontalAlignment="Left" Width="1" />
                <ItemsPresenter Name="ItemsPresenter" MaxWidth="250" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" />
              </Grid>
            </ScrollViewer>
          </Border>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="True">
        <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
      </Trigger>
      <Trigger Property="MenuItem.Icon" Value="{x:Null}">
        <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="MenuItem.IsChecked" Value="True">
        <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible" />
        <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="MenuItem.IsHighlighted" Value="True">
        <Setter TargetName="templateRoot" Value="{DynamicResource ItemHoverColor}" Property="Border.Background" />
        <Setter TargetName="templateRoot" Value="{DynamicResource ItemHoverColor}" Property="Border.BorderBrush" />
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter TargetName="templateRoot" Value="{DynamicResource TextColorPrimary}" Property="TextElement.Foreground" />
      </Trigger>
      <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="False">
        <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}" />
        <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="for_normal_window" TargetType="{x:Type Window}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Window}">
          <Grid>
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Margin}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" CornerRadius="5" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="for_max_window" TargetType="{x:Type Window}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Window}">
          <Grid Margin="{Binding Converter={StaticResource MaxWindowMarginConverter}}">
            <ContentPresenter />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="normalButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{DynamicResource TitleBarIconColor}" />
    <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="PART_Background" BorderThickness="0" Background="#00FFFFFF">
            <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
            <!--border包一层ContentPresenter，鼠标经过和按下的时候修改border的背景-->
              <Setter TargetName="PART_Background" Value="{DynamicResource ButtonHoverColor}" Property="Border.Background" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="PART_Background" Value="{DynamicResource DividerColorPrimary}" Property="Border.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TitleButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{DynamicResource TitleBarIconColor}" />
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="PART_Background" BorderThickness="0" Background="#00FFFFFF">
            <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="closeButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Foreground" Value="{DynamicResource IconColorSecondary}" />
    <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="PART_Background" BorderThickness="0" Background="#00FFFFFF">
            <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="PART_Background" Property="Border.Background">
                <Setter.Value>
                  <SolidColorBrush Color="{DynamicResource ColorPrimary}" />
                </Setter.Value>
              </Setter>
              <Setter Property="Foreground">
                <Setter.Value>
                  <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="White" Offset="0.0" />
                  </LinearGradientBrush>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="PART_Background" Property="Border.Background">
                <Setter.Value>
                  <SolidColorBrush Color="{DynamicResource ColorPrimary}" Opacity="0.75" />
                </Setter.Value>
              </Setter>
              <Setter Property="Foreground">
                <Setter.Value>
                  <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="White" Offset="0.0" />
                  </LinearGradientBrush>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HoverButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Foreground" Value="#00FFFFFF" />
    <Setter Property="FrameworkElement.Tag" Value="4" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding Tag, Converter={StaticResource TagCornerConverter}}">
            <ContentPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource ButtonHoverColor}" />
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="False">
        <Setter Property="Background" Value="#00FFFFFF" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="CaneldarTodayButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="{DynamicResource ButtonHoverColor}" />
    <Setter Property="Foreground" Value="#00FFFFFF" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Width" Value="60" />
    <Setter Property="Height" Value="28" />
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="Border" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource DividerColorPrimary}" BorderThickness="1">
            <Grid>
              <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Border" Value="{DynamicResource CalendarButtonHoverColor}" Property="Border.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="WidgetCalendarButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Foreground" Value="{DynamicResource DividerColorPrimary}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{DynamicResource DividerColorPrimary}" BorderThickness="0">
            <Grid>
              <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
              <Border Name="cover" CornerRadius="2" Background="{DynamicResource ItemHoverColor}" Visibility="Collapsed" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="cover" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SetDateButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FontSize" Value="13" />
    <Setter Property="Background" Value="{DynamicResource SetDateButtonDefaultColor}" />
    <Setter Property="Height" Value="28" />
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Border Background="{TemplateBinding Background}" Height="{TemplateBinding Height}" CornerRadius="2" BorderThickness="0" />
            <Border BorderBrush="{DynamicResource ButtonBorderPrimary}" CornerRadius="2" BorderThickness="1" />
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="8,0" />
            <Border Name="cover" CornerRadius="2" Background="{DynamicResource ButtonHoverColor}" Visibility="Collapsed" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="cover" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CancelButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FontSize" Value="13" />
    <Setter Property="Background" Value="{DynamicResource CancelBackground}" />
    <Setter Property="Height" Value="32" />
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Border Background="{TemplateBinding Background}" Height="{TemplateBinding Height}" CornerRadius="2" BorderThickness="0" />
            <Border BorderBrush="{DynamicResource ButtonBorderPrimary}" CornerRadius="2" BorderThickness="{DynamicResource ButtonBorderThickness}" />
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="8,0" />
            <Border Name="cover" CornerRadius="2" Background="{DynamicResource ButtonHoverColor}" Visibility="Collapsed" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="cover" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SaveButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FontSize" Value="13" />
    <Setter Property="Background" Value="{DynamicResource PrimaryColor}" />
    <Setter Property="Height" Value="32" />
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="Foreground" Value="#FFFFFFFF" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Border Background="{TemplateBinding Background}" Height="{TemplateBinding Height}" CornerRadius="2" BorderThickness="0" />
            <Border BorderBrush="{DynamicResource PopupBorderPrimary}" CornerRadius="2" BorderThickness="{DynamicResource ButtonBorderThickness}" />
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="8,0" />
            <Border Name="cover" CornerRadius="2" Background="{DynamicResource ButtonHoverColor}" Visibility="Collapsed" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="cover" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="True">
        <Setter Property="UIElement.Opacity" Value="1" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value="0.54" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SetButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FontSize" Value="13" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Height" Value="28" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{DynamicResource TextBorderColor}">
            <Grid>
              <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0" />
              <Border Name="cover" Background="{DynamicResource ButtonHoverColor}" Visibility="Collapsed" CornerRadius="2" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="cover" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CancelButtonStyle2" TargetType="{x:Type Button}" BasedOn="{StaticResource CancelButtonStyle}">
    <Setter Property="Height" Value="28" />
    <Setter Property="Width" Value="86" />
  </Style>
  <Style x:Key="SaveButtonStyle2" TargetType="{x:Type Button}" BasedOn="{StaticResource SaveButtonStyle}">
    <Setter Property="Height" Value="28" />
    <Setter Property="Width" Value="86" />
  </Style>
  <Style x:Key="NormalButton" TargetType="{x:Type Button}">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Height" Value="32" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource TextBorderColor}" CornerRadius="4">
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource ItemHoverColor}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SettingsButton" TargetType="{x:Type Button}">
    <Setter Property="MinWidth" Value="88" />
    <Setter Property="MinHeight" Value="28" />
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{DynamicResource PopupBackground}" BorderBrush="{DynamicResource DividerColorPrimary}" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" BorderThickness="1" HorizontalAlignment="Center" VerticalAlignment="Center" CornerRadius="4">
            <TextBlock MaxWidth="160" Foreground="{DynamicResource TextColorPrimary}" TextTrimming="CharacterEllipsis" HorizontalAlignment="Center" FontSize="13" VerticalAlignment="Center" FontFamily="{TemplateBinding FontFamily}" Text="{TemplateBinding Content}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NoneButton" TargetType="{x:Type Button}">
    <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{DynamicResource PopupBackground}" BorderBrush="#FFFFFFFF" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" HorizontalAlignment="Center" VerticalAlignment="Center">
            <ContentPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TokenButton" TargetType="{x:Type Button}">
    <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" CornerRadius="4" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
            <ContentPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TransparentButton" TargetType="{x:Type Button}">
    <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" CornerRadius="4" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
            <ContentPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Padding" Value="4,1" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="BorderBrush" Value="#00FFFFFF" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border Name="Bd" BorderThickness="0" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Bd" Value="{DynamicResource SystemColors.GrayTextBrushKey}" Property="TextElement.Foreground" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="False" />
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource TextAccentColor}" Property="Border.Background" />
              <Setter TargetName="Bd" Value="{DynamicResource TextAccentColor}" Property="Border.BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                <Condition Property="UIElement.IsMouseOver" Value="False" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="#FFFFFFFF" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="#FFFFFFFF" />
              <Setter TargetName="Bd" Value="{DynamicResource PrimaryColor}" Property="TextElement.Foreground" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                <Condition Property="UIElement.IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource TextAccentColor}" Property="Border.Background" />
              <Setter TargetName="Bd" Value="{DynamicResource TextAccentColor}" Property="Border.BorderBrush" />
              <Setter TargetName="Bd" Property="TextElement.Foreground" Value="#FFFFFFFF" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                <Condition Property="UIElement.IsMouseOver" Value="False" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Border.Background" Value="#FFFFFFFF" />
              <Setter TargetName="Bd" Property="Border.BorderBrush" Value="#FFFFFFFF" />
              <Setter TargetName="Bd" Value="{DynamicResource PrimaryColor}" Property="TextElement.Foreground" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="False" />
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="UIElement.IsKeyboardFocused" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource TextAccentColor}" Property="Border.Background" />
              <Setter TargetName="Bd" Value="{DynamicResource TextAccentColor}" Property="Border.BorderBrush" />
              <Setter TargetName="Bd" Property="TextElement.Foreground" Value="#FFFFFFFF" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF" />
  <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070" />
  <Style x:Key="SimpleCheckBoxStyle" TargetType="{x:Type CheckBox}">
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="BorderBrush" Value="{DynamicResource TextColorTertiary}" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
    <Setter Property="FrameworkElement.UseLayoutRounding" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Grid Name="templateRoot" Background="#00FFFFFF" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
              <Path Name="checkBoxBorderNone" Fill="{TemplateBinding BorderBrush}" Stretch="Uniform" Data="{Binding Path=Data, Source={StaticResource ic_svg_path_checkbox_none}}" />
              <Path Name="checkBoxBorderCheck" Fill="{DynamicResource TextColorSubPrimary}" Stretch="Uniform" Opacity="0" Data="{Binding Path=Data, Source={StaticResource ic_svg_path_checkbox_checkd}}" />
            </Grid>
            <ContentPresenter Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="True">
              <Setter Property="Padding" Value="4,-1,0,0" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True" />
            <Trigger Property="IsEnabled" Value="False" />
            <Trigger Property="IsPressed" Value="True" />
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="checkBoxBorderCheck" Property="UIElement.Opacity" Value="0.56" />
              <Setter TargetName="checkBoxBorderNone" Property="UIElement.Opacity" Value="0" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="{x:Null}">
              <Setter TargetName="checkBoxBorderCheck" Property="UIElement.Opacity" Value="0.56" />
              <Setter TargetName="checkBoxBorderNone" Property="UIElement.Opacity" Value="1" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BlueSwitchCheckBoxStyle" TargetType="{x:Type CheckBox}">
    <Setter Property="Foreground" Value="{DynamicResource SystemColors.WindowTextBrushKey}" />
    <Setter Property="Background" Value="{DynamicResource SystemColors.WindowBrushKey}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <FrameworkTemplate.Resources>
            <ResourceDictionary>
              <Storyboard x:Key="OnChecking">
                <DoubleAnimation Duration="00:00:0.1" Storyboard.TargetName="slider" From="24" To="24" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" />
              </Storyboard>
              <Storyboard x:Key="OnUnchecking">
                <DoubleAnimation Duration="00:00:0.1" Storyboard.TargetName="slider" From="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" />
              </Storyboard>
            </ResourceDictionary>
          </FrameworkTemplate.Resources>
          <DockPanel Name="dockPanel">
            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" VerticalAlignment="Center" />
            <Grid>
              <Border Name="BackgroundBorder" CornerRadius="10" Height="20" Width="44">
                <Border.Background>
                  <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="#FFC7C7C7" Offset="0" />
                  </LinearGradientBrush>
                </Border.Background>
              </Border>
              <Border Name="slider" BorderBrush="#FF939393" HorizontalAlignment="Left" VerticalAlignment="Center" Height="12" Margin="4,0" BorderThickness="0">
                <UIElement.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1" />
                    <SkewTransform AngleX="0" AngleY="0" />
                    <RotateTransform Angle="0" />
                    <TranslateTransform X="0" Y="0" />
                  </TransformGroup>
                </UIElement.RenderTransform>
                <Ellipse Width="12" Height="12" Stroke="#FFFFFFFF" Fill="#FFFFFFFF" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" />
              </Border>
            </Grid>
          </DockPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <TriggerBase.ExitActions>
                <BeginStoryboard Name="OnUnchecking_BeginStoryboard" Storyboard="{StaticResource OnUnchecking}" />
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Name="OnChecking_BeginStoryboard" Storyboard="{StaticResource OnChecking}" />
              </TriggerBase.EnterActions>
              <Setter TargetName="BackgroundBorder" Value="{DynamicResource PrimaryColor}" Property="Border.Background" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False" />
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid>
            <Rectangle Name="rect" Fill="{DynamicResource ScrollBarColor}" Opacity="0.65" RadiusX="2" RadiusY="2" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="rect" Property="UIElement.Opacity" Value="1" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HorizontalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="UIElement.Opacity" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="VerticalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="UIElement.Opacity" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="for_scrollbar" TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Margin" Value="1" />
    <Setter Property="Width" Value="8" />
    <Setter Property="MinWidth" Value="8" />
    <Setter Property="UIElement.Opacity" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid Name="Bg" SnapsToDevicePixels="True">
            <Track Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}" IsDirectionReversed="True">
              <Track.DecreaseRepeatButton>
                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource VerticalScrollBarPageButton}" />
              </Track.DecreaseRepeatButton>
              <Track.IncreaseRepeatButton>
                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource VerticalScrollBarPageButton}" />
              </Track.IncreaseRepeatButton>
              <Track.Thumb>
                <Thumb Style="{StaticResource ScrollBarThumb}" />
              </Track.Thumb>
            </Track>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Margin" Value="1,0,6,1" />
        <Setter Property="Height" Value="10" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="UIElement.Opacity" Value="0.8" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollBar}">
              <Grid Name="Bg" SnapsToDevicePixels="True">
                <Track Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource HorizontalScrollBarPageButton}" />
                  </Track.DecreaseRepeatButton>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource HorizontalScrollBarPageButton}" />
                  </Track.IncreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}" />
                  </Track.Thumb>
                </Track>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="for_scrollviewer" TargetType="{x:Type ScrollViewer}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalOnly" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid>
            <ScrollContentPresenter Cursor="{TemplateBinding Cursor}" Margin="{TemplateBinding Padding}" VirtualizingPanel.VirtualizationMode="Recycling" VirtualizingPanel.IsVirtualizing="True" CanContentScroll="True" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" />
            <ScrollBar Name="PART_VerticalScrollBar" HorizontalAlignment="Right" VirtualizingPanel.VirtualizationMode="Recycling" VirtualizingPanel.IsVirtualizing="True" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Value="{TemplateBinding VerticalOffset}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Style="{StaticResource for_scrollbar}" />
            <ScrollBar Name="PART_HorizontalScrollBar" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" VirtualizingPanel.VirtualizationMode="Recycling" VirtualizingPanel.IsVirtualizing="True" VerticalAlignment="Bottom" Value="{TemplateBinding HorizontalOffset}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Style="{StaticResource for_scrollbar}" />
          </Grid>
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="ScrollChanged">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.5" />
                  <DoubleAnimation Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" BeginTime="0:0:1" />
                  <DoubleAnimation Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.5" />
                  <DoubleAnimation Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" BeginTime="0:0:1" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseEnter" SourceName="PART_VerticalScrollBar">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.5" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave" SourceName="PART_VerticalScrollBar">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity" To="0" BeginTime="0:0:1" Duration="0:0:0.5" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseEnter" SourceName="PART_HorizontalScrollBar">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.5" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave" SourceName="PART_HorizontalScrollBar">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity" To="0" BeginTime="0:0:1" Duration="0:0:0.5" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CalendarStyle1" TargetType="{x:Type Calendar}">
    <Setter Property="Foreground" Value="#FF333333" />
    <Setter Property="Background" Value="#FFFFFFFF" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Calendar}">
          <StackPanel Name="PART_Root" HorizontalAlignment="Center">
            <CalendarItem Name="PART_CalendarItem" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Style="{TemplateBinding CalendarItemStyle}" />
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Calendar.CalendarItemStyle" Value="{DynamicResource CalendarItemStyle1}" />
    <Setter Property="Calendar.CalendarDayButtonStyle" Value="{DynamicResource CalendarDayButtonStyle1}" />
  </Style>
  <Style x:Key="CalendarItemStyle1" TargetType="{x:Type CalendarItem}">
    <Setter Property="Margin" Value="0,3,0,3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CalendarItem}">
          <FrameworkTemplate.Resources>
            <ResourceDictionary>
              <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
                <TextBlock Foreground="{DynamicResource TextColorSecondary}" FontSize="12" HorizontalAlignment="Center" Margin="0,6,0,6" VerticalAlignment="Center" Text="{Binding}" />
              </DataTemplate>
            </ResourceDictionary>
          </FrameworkTemplate.Resources>
          <Grid Name="PART_Root">
            <FrameworkElement.Resources>
              <ResourceDictionary>
                <SolidColorBrush x:Key="DisabledColor" Color="#A5FFFFFF" />
              </ResourceDictionary>
            </FrameworkElement.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="1">
              <Border BorderBrush="#FFFFFFFF" BorderThickness="2" CornerRadius="1">
                <Grid>
                  <FrameworkElement.Resources>
                    <ResourceDictionary>
                      <ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type Button}">
                        <Grid Cursor="Hand">
                          <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                              <VisualState x:Name="Normal" />
                              <VisualState x:Name="MouseOver">
                                <Storyboard>
                                  <ColorAnimation Duration="0" To="#FF757575" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="path" />
                                </Storyboard>
                              </VisualState>
                              <VisualState x:Name="Disabled">
                                <Storyboard>
                                  <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="path" />
                                </Storyboard>
                              </VisualState>
                            </VisualStateGroup>
                          </VisualStateManager.VisualStateGroups>
                          <Rectangle Fill="#11E5EBF1" Opacity="1" Stretch="Fill" />
                          <Grid>
                            <Path Name="path" Data="M288.75,232.25 L288.75,240.625 L283,236.625" Fill="#A3A3A3" HorizontalAlignment="Left" Height="10" Margin="14,-6,0,0" Stretch="Fill" VerticalAlignment="Center" Width="6" />
                          </Grid>
                        </Grid>
                      </ControlTemplate>
                      <ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type Button}">
                        <Grid Cursor="Hand">
                          <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                              <VisualState x:Name="Normal" />
                              <VisualState x:Name="MouseOver">
                                <Storyboard>
                                  <ColorAnimation Duration="0" To="#FF757575" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="path" />
                                </Storyboard>
                              </VisualState>
                              <VisualState x:Name="Disabled">
                                <Storyboard>
                                  <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="path" />
                                </Storyboard>
                              </VisualState>
                            </VisualStateGroup>
                          </VisualStateManager.VisualStateGroups>
                          <Rectangle Fill="#11E5EBF1" Opacity="1" Stretch="Fill" />
                          <Grid>
                            <Path Name="path" Data="M282.875,231.875 L282.875,240.375 L288.625,236" Fill="#A3A3A3" HorizontalAlignment="Right" Height="10" Margin="0,-6,14,0" Stretch="Fill" VerticalAlignment="Center" Width="6" />
                          </Grid>
                        </Grid>
                      </ControlTemplate>
                      <ControlTemplate x:Key="HeaderButtonTemplate" TargetType="{x:Type Button}">
                        <Grid Cursor="Hand">
                          <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                              <VisualState x:Name="Normal" />
                              <VisualState x:Name="MouseOver">
                                <Storyboard>
                                  <ColorAnimation Duration="0" To="#FF757575" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="buttonContent" />
                                </Storyboard>
                              </VisualState>
                              <VisualState x:Name="Disabled">
                                <Storyboard>
                                  <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="buttonContent" />
                                </Storyboard>
                              </VisualState>
                            </VisualStateGroup>
                          </VisualStateManager.VisualStateGroups>
                          <ContentPresenter Name="buttonContent" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" TextElement.FontSize="12" TextElement.FontWeight="Normal" TextElement.Foreground="{DynamicResource TextColorSecondary}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,4,1,9" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                      </ControlTemplate>
                    </ResourceDictionary>
                  </FrameworkElement.Resources>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                  </Grid.RowDefinitions>
                  <Button Name="PART_PreviousButton" Grid.Column="0" Focusable="False" HorizontalAlignment="Left" Height="20" Grid.Row="0" Template="{DynamicResource PreviousButtonTemplate}" Width="28" />
                  <Button Name="PART_HeaderButton" Grid.Column="1" FontWeight="Bold" Focusable="False" FontSize="10.5" HorizontalAlignment="Center" Grid.Row="0" Template="{DynamicResource HeaderButtonTemplate}" VerticalAlignment="Center" />
                  <Button Name="PART_NextButton" Grid.Column="2" Focusable="False" HorizontalAlignment="Right" Height="20" Grid.Row="0" Template="{DynamicResource NextButtonTemplate}" Width="28" />
                  <Grid Name="PART_MonthView" ColumnSpan="3" HorizontalAlignment="Center" Margin="6,-1,6,6" Row="1" Visibility="Visible">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                  </Grid>
                  <Grid Name="PART_YearView" ColumnSpan="3" HorizontalAlignment="Center" Margin="6,-3,7,6" Row="1" Visibility="Hidden">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                  </Grid>
                </Grid>
              </Border>
            </Border>
            <Rectangle Name="PART_DisabledVisual" Fill="{DynamicResource DisabledColor}" Opacity="0" RadiusY="2" RadiusX="2" Stretch="Fill" Stroke="{DynamicResource DisabledColor}" StrokeThickness="1" Visibility="Collapsed" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="PART_DisabledVisual" Property="Visibility" Value="Visible" />
            </Trigger>
            <DataTrigger Value="Year" Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}">
              <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden" />
              <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Value="Decade" Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}">
              <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden" />
              <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CalendarDayButtonStyle1" TargetType="{x:Type CalendarDayButton}">
    <Setter Property="MinWidth" Value="5" />
    <Setter Property="MinHeight" Value="5" />
    <Setter Property="FontSize" Value="10" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CalendarDayButton}">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.1" />
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal">
                  <Storyboard />
                </VisualState>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HoverBackground" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimation Duration="0" To="White" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To=".35" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="NormalText" />
                    <ColorAnimation Duration="0" To="#FF989898" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DayStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0" />
                </VisualStateGroup.Transitions>
                <VisualState x:Name="RegularDay" />
                <VisualState x:Name="Today">
                  <Storyboard>
                    <ColorAnimation Duration="0" To="{DynamicResource primary_blue_100}" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.FontWeight)" Storyboard.TargetName="NormalText">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <ObjectKeyFrame.Value>
                          <FontWeight>Bold</FontWeight>
                        </ObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0" />
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="SelectedBackground" />
                    <ColorAnimation Duration="0" To="White" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ActiveStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0" />
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Active">
                  <Storyboard>
                    <ColorAnimation Duration="0" To="#FF262626" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Inactive">
                  <Storyboard>
                    <ColorAnimation Duration="0" To="#FF989898" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="NormalText" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="BlackoutDayStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0" />
                </VisualStateGroup.Transitions>
                <VisualState x:Name="NormalDay" />
                <VisualState x:Name="BlackoutDay">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To=".2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Blackout" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle Name="HoverBackground" Fill="{DynamicResource ItemHoverColor}" Opacity="0" RadiusY="26" RadiusX="26" Width="26" Height="26" />
            <Rectangle Name="SelectedBackground" Fill="{DynamicResource PrimaryColor}" Opacity="0" RadiusY="26" RadiusX="26" Width="26" Height="26" />
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" />
            <ContentPresenter Name="NormalText" TextElement.Foreground="#FF262626" TextBlock.FontSize="12" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="5,1,5,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            <Path Name="Blackout" Data="M8.1772461,11.029181 L10.433105,11.029181 L11.700684,12.801641 L12.973633,11.029181 L15.191895,11.029181 L12.844727,13.999395 L15.21875,17.060919 L12.962891,17.060919 L11.673828,15.256231 L10.352539,17.060919 L8.1396484,17.060919 L10.519043,14.042364" Fill="#FF000000" HorizontalAlignment="Stretch" Margin="3" Opacity="0" RenderTransformOrigin="0.5,0.5" Stretch="Fill" VerticalAlignment="Stretch" />
            <Rectangle Name="DayButtonFocusVisual" IsHitTestVisible="False" RadiusY="1" RadiusX="1" Stroke="#FF45D6FA" Visibility="Collapsed" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="ButtonBase.ClickMode" Value="Press" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Name="templateRoot" SnapsToDevicePixels="True" Background="#00FFFFFF" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource TextBorderColor}">
            <Border Name="splitBorder" Width="{DynamicResource SystemParameters.VerticalScrollBarWidthKey}" SnapsToDevicePixels="True" Margin="0,0,6,0" HorizontalAlignment="Right" BorderThickness="1" BorderBrush="#00FFFFFF">
              <Path Name="arrow" Width="8" Height="4" Fill="{DynamicResource TextColorTertiary}" Stretch="Fill" Data="{Binding Path=Data, Source={StaticResource ic_svg_path_arrow}}" />
            </Border>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ListViewStyle" TargetType="{x:Type ListView}">
    <Setter Property="ListBox.SelectionMode" Value="Extended" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
    <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
    <Setter Property="ScrollViewer.PanningMode" Value="None" />
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ListViewItem}">
          <Setter Property="HorizontalContentAlignment" Value="Stretch" />
          <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <Border Name="Bd" BorderBrush="#00FFFFFF" BorderThickness="0" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ScrollViewer VirtualizingPanel.IsVirtualizing="True" Padding="{TemplateBinding Padding}" Style="{StaticResource for_scrollviewer}">
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ItemsControl.IsGrouping" Value="True" />
                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ReadOnlyText" TargetType="{x:Type TextBox}">
    <Setter Property="BorderBrush" Value="#00FFFFFF" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="TextBoxBase.IsReadOnly" Value="True" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="TextBox.TextWrapping" Value="Wrap" />
  </Style>
  <Style x:Key="TagPopupItemTextBoxStyle" TargetType="{x:Type TextBox}">
    <Setter Property="Background" Value="{DynamicResource PopupBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="Height" Value="35" />
    <Setter Property="FrameworkElement.Cursor" Value="Arrow" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="UIElement.AllowDrop" Value="True" />
    <Setter Property="TextBoxBase.IsReadOnly" Value="True" />
    <Setter Property="MaxWidth" Value="190" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <TextBlock Text="{TemplateBinding Text}" Margin="15,0" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" TextTrimming="CharacterEllipsis" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="TextBoxBase.IsInactiveSelectionHighlightEnabled" Value="True" />
          <Condition Property="TextBoxBase.IsSelectionActive" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="TextBoxBase.SelectionBrush" Value="{DynamicResource SystemColors.InactiveSelectionHighlightBrushKey}" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="PopupBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.CornerRadius" Value="5" />
    <Setter Property="Margin" Value="20" />
    <Setter Property="Background" Value="{DynamicResource PopupBackground}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="20" Opacity="0.20" ShadowDepth="3" Direction="270" />
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PopupBorderStyle1" TargetType="{x:Type Border}">
    <Setter Property="Border.CornerRadius" Value="5" />
    <Setter Property="Margin" Value="10" />
    <Setter Property="Background" Value="{DynamicResource PopupBackground}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="10" Opacity="0.20" ShadowDepth="3" Direction="270" />
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PopupInnerBorderStyle1" TargetType="{x:Type Border}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource PopupBorderPrimary}" />
    <Setter Property="Background" Value="{DynamicResource PopupInnerBackground}" />
    <Setter Property="Margin" Value="10" />
    <Setter Property="Border.CornerRadius" Value="4" />
  </Style>
  <Style x:Key="PopupInnerBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource PopupBorderPrimary}" />
    <Setter Property="Background" Value="{DynamicResource PopupInnerBackground}" />
    <Setter Property="Margin" Value="20" />
    <Setter Property="Border.CornerRadius" Value="4" />
  </Style>
  <Style x:Key="EditorContentStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="MinWidth" Value="122" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid>
            <Border Name="bd" Style="{DynamicResource PopupBorderStyle}" Margin="16,10" />
            <Border Style="{DynamicResource PopupInnerBorderStyle}" MinWidth="{TemplateBinding MinWidth}" BorderThickness="0" Margin="16,10">
              <ContentPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Margin}" />
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PopupBorderLessContentStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="MinWidth" Value="122" />
    <Setter Property="Margin" Value="0,8" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid>
            <Border Name="bd" Style="{DynamicResource PopupBorderLessBorderStyle}" />
            <Border Style="{DynamicResource PopupBorderLessInnerBorderStyle}" MinWidth="{TemplateBinding MinWidth}">
              <ContentPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Margin}" />
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PopupBorderLessBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Background" Value="{DynamicResource PopupBackground}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="PopupBorderLessInnerBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource PopupBorderPrimary}" />
    <Setter Property="Background" Value="{DynamicResource PopupInnerBackground}" />
  </Style>
  <Style x:Key="PopupContentStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="MinWidth" Value="122" />
    <Setter Property="Margin" Value="0,8" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid>
            <Border Name="bd" Style="{DynamicResource PopupBorderStyle}" />
            <Border Style="{DynamicResource PopupInnerBorderStyle}" MinWidth="{TemplateBinding MinWidth}">
              <ContentPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Margin}" />
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PopupContentStyle1" TargetType="{x:Type ContentControl}">
    <Setter Property="MinWidth" Value="122" />
    <Setter Property="Margin" Value="0,8" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid>
            <Border Name="bd" Style="{DynamicResource PopupBorderStyle1}" />
            <Border Style="{DynamicResource PopupInnerBorderStyle1}" MinWidth="{TemplateBinding MinWidth}">
              <ContentPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Margin}" />
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToastBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="16" Opacity="0.25" ShadowDepth="16" Direction="270" />
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="QuickAddWindowBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="32" Opacity="0.25" ShadowDepth="16" Direction="270" />
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PomoActiveBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="32" Opacity="0.25" ShadowDepth="16" Direction="270" />
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PomoNormalBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="12" Opacity="0.15" ShadowDepth="6" Direction="270" />
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HoverBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource DividerColorPrimary}" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Border.CornerRadius" Value="2" />
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource DividerColorPrimary}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ListPathStyle" TargetType="{x:Type Path}">
    <Setter Property="MaxHeight" Value="15" />
    <Setter Property="MaxWidth" Value="15" />
    <Setter Property="Shape.Stretch" Value="Uniform" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>
  <Style x:Key="TaskListViewTitleStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="FontSize" Value="14" />
    <Style.Triggers>
      <Trigger Property="Text" Value="">
        <Setter Property="Visibility" Value="Collapsed" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="TaskListViewTextBoxTitleStyle" TargetType="{x:Type TextBox}">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="TextBox.MaxLines" Value="1" />
    <Setter Property="Height" Value="36" />
    <Setter Property="FrameworkElement.Cursor" Value="IBeam" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Margin" Value="10,0" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
  </Style>
  <Style x:Key="TaskListViewLineStyle" TargetType="{x:Type Line}">
    <Setter Property="Stroke" Value="{DynamicResource DividerColorPrimary}" />
    <Setter Property="Line.X1" Value="0" />
    <Setter Property="Line.X2" Value="10" />
    <Setter Property="Shape.Stretch" Value="Fill" />
    <Setter Property="UIElement.Opacity" Value="1" />
    <Setter Property="StrokeThickness" Value="1" />
    <Setter Property="VerticalAlignment" Value="Bottom" />
  </Style>
  <Style x:Key="TaskPathStyle" TargetType="{x:Type Path}">
    <Setter Property="Height" Value="14" />
    <Setter Property="Width" Value="14" />
    <Setter Property="Shape.Stretch" Value="Uniform" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>
  <Style x:Key="TaskBottomPathStyle" TargetType="{x:Type Path}">
    <Setter Property="Height" Value="16" />
    <Setter Property="Width" Value="16" />
    <Setter Property="Shape.Stretch" Value="Uniform" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>
  <Style x:Key="LoadingIndicatorRingStyle" TargetType="{x:Type views:LoadingIndicator}">
    <Setter Property="Foreground" Value="{DynamicResource TextColorTertiary}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="Width" Value="16" />
    <Setter Property="Height" Value="16" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type views:LoadingIndicator}">
          <Border Name="PART_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="SizeStates">
                <VisualState x:Name="Large" />
                <VisualState x:Name="Small" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="ActiveStates">
                <VisualState x:Name="Inactive" />
                <VisualState x:Name="Active">
                  <Storyboard SpeedRatio="{TemplateBinding views:SpeedRatio}">
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.000" Storyboard.TargetName="PART_Ellipse0" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.100" Storyboard.TargetName="PART_Ellipse1" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.200" Storyboard.TargetName="PART_Ellipse2" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.300" Storyboard.TargetName="PART_Ellipse3" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.400" Storyboard.TargetName="PART_Ellipse4" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.500" Storyboard.TargetName="PART_Ellipse5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.600" Storyboard.TargetName="PART_Ellipse6" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.700" Storyboard.TargetName="PART_Ellipse7" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.000" Storyboard.TargetName="PART_Ellipse0" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.100" Storyboard.TargetName="PART_Ellipse1" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.200" Storyboard.TargetName="PART_Ellipse2" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.300" Storyboard.TargetName="PART_Ellipse3" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.400" Storyboard.TargetName="PART_Ellipse4" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.500" Storyboard.TargetName="PART_Ellipse5" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.600" Storyboard.TargetName="PART_Ellipse6" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.700" Storyboard.TargetName="PART_Ellipse7" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                      <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                      <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Background="#00FFFFFF" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
              <FrameworkElement.Resources>
                <ResourceDictionary>
                  <Style x:Key="{x:Type Ellipse}" TargetType="{x:Type Ellipse}">
                    <Setter Property="UIElement.RenderTransformOrigin" Value="0.5,0.5" />
                    <Setter Property="Width" Value="3" />
                    <Setter Property="Height" Value="3" />
                    <Setter Property="RenderTransform">
                      <Setter.Value>
                        <ScaleTransform ScaleX="0" ScaleY="0" />
                      </Setter.Value>
                    </Setter>
                  </Style>
                </ResourceDictionary>
              </FrameworkElement.Resources>
              <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
              </Grid.RowDefinitions>
              <Ellipse Name="PART_Ellipse0" Grid.Row="0" Grid.Column="2" Fill="{TemplateBinding Foreground}" />
              <Ellipse Name="PART_Ellipse1" Grid.Row="0" Grid.Column="3" Grid.RowSpan="2" Grid.ColumnSpan="2" Fill="{TemplateBinding Foreground}" />
              <Ellipse Name="PART_Ellipse2" Grid.Row="2" Grid.Column="4" Fill="{TemplateBinding Foreground}" />
              <Ellipse Name="PART_Ellipse3" Grid.Row="3" Grid.Column="3" Grid.RowSpan="2" Grid.ColumnSpan="2" Fill="{TemplateBinding Foreground}" />
              <Ellipse Name="PART_Ellipse4" Grid.Row="4" Grid.Column="2" Fill="{TemplateBinding Foreground}" />
              <Ellipse Name="PART_Ellipse5" Grid.Row="3" Grid.Column="0" Grid.RowSpan="2" Grid.ColumnSpan="2" Fill="{TemplateBinding Foreground}" />
              <Ellipse Name="PART_Ellipse6" Grid.Row="2" Grid.Column="0" Fill="{TemplateBinding Foreground}" />
              <Ellipse Name="PART_Ellipse7" Grid.Row="0" Grid.Column="0" Grid.RowSpan="2" Grid.ColumnSpan="2" Fill="{TemplateBinding Foreground}" />
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SettingTitleStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="FontSize" Value="13" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="Margin" Value="0,24,0,12" />
    <Setter Property="TextWrapping" Value="Wrap" />
  </Style>
  <Style x:Key="SettingSetStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="FontSize" Value="18" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="Margin" Value="0,20,0,0" />
  </Style>
  <Style x:Key="SettingUnitStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="FontSize" Value="13" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="Margin" Value="8,0,0,0" />
  </Style>
  <Style x:Key="SettingHintStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="FontSize" Value="13" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorTertiary}" />
    <Setter Property="Margin" Value="8,0,0,0" />
  </Style>
  <Style x:Key="PasswordTextStyle" TargetType="{x:Type PasswordBox}">
    <Setter Property="Height" Value="36" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="FontSize" Value="14" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="PasswordBox.CaretBrush" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="4,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
          <Border Name="border" BorderBrush="{DynamicResource TextBorderColor}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ScrollViewer Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Value="{DynamicResource TextDisableBackground}" Property="Background" />
              <Setter Value="{DynamicResource TextDisableColor}" Property="Foreground" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
              <Setter Property="Background" Value="#00FFFFFF" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="border" Value="{DynamicResource PrimaryColor}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="True">
              <Setter TargetName="border" Value="{DynamicResource PrimaryColor}" Property="Border.BorderBrush" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ProjectTextStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="Foreground" Value="{DynamicResource TextInverseColorPrimary}" />
    <Setter Property="FontSize" Value="14" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Margin" Value="8" />
  </Style>
  <Style x:Key="IconTextStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="Foreground" Value="{DynamicResource TextInverseColorSecondary}" />
    <Setter Property="FontSize" Value="14" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Margin" Value="10" />
  </Style>
  <Style x:Key="ProjectIconStyle" TargetType="{x:Type Path}">
    <Setter Property="Fill" Value="{DynamicResource IconInverseColorPrimary}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="Shape.Stretch" Value="Uniform" />
  </Style>
  <Style x:Key="ListButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Height" Value="32" />
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Background}">
            <TextBlock HorizontalAlignment="Left" VerticalAlignment="Center" Margin="12,0" TextTrimming="CharacterEllipsis" FontSize="13" Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource ItemHoverColor}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="HoverUnderlineStyle" TargetType="{x:Type TextBlock}">
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="TextDecorations" Value="Underline" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="GridHoverStyle" TargetType="{x:Type Grid}">
    <Setter Property="Background">
      <Setter.Value>
        <SolidColorBrush Color="Transparent" />
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource ItemHoverColor}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="AppMenuItemStyle" TargetType="{x:Type MenuItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Border Margin="0" MinWidth="80" Height="32" Background="#00FFFFFF">
            <Grid>
              <StackPanel Orientation="Horizontal">
                <ContentPresenter ContentSource="Icon" HorizontalAlignment="Center" VerticalAlignment="Center" />
                <ContentPresenter ContentSource="Header" HorizontalAlignment="Center" VerticalAlignment="Center" />
              </StackPanel>
              <Border Name="border" Background="{TemplateBinding Background}" Visibility="Collapsed" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MenuSeparatorStyle" TargetType="{x:Type Separator}">
    <Setter Property="Margin" Value="0,6" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource DividerColorPrimary}" Height="1" SnapsToDevicePixels="True" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="KanbanItemStyle" TargetType="{x:Type UserControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type UserControl}">
          <Border CornerRadius="3" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="12,2,12,6" Opacity="{Binding Dragging, Converter={StaticResource ColumnOpacityConverter}}">
            <UIElement.Effect>
              <DropShadowEffect BlurRadius="5" Opacity="0.08" ShadowDepth="0" />
            </UIElement.Effect>
            <Border.Background>
              <MultiBinding Converter="{StaticResource KanbanBackgroundConverter}">
                <Binding Path="Selected" />
                <Binding Path="IsMouseOver" ElementName="ItemControl" />
                <Binding Path="CanDrop" />
                <Binding Source="{x:Static resource:LocalSettings.Settings}" Path="ThemeId" />
              </MultiBinding>
            </Border.Background>
            <Grid>
              <ContentPresenter />
              <Thumb Name="DragThumb" Grid.Row="0" Margin="24,0,0,0" Opacity="0" Background="#00FFFFFF" VerticalAlignment="Stretch" Cursor="Hand" />
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CustomWindowStyle" TargetType="{x:Type Window}">
    <Setter Property="Window.AllowsTransparency" Value="True" />
    <Setter Property="BorderBrush" Value="#FFFFFFFF" />
    <Setter Property="Background" Value="{DynamicResource WindowBackgroundPrimary}" />
    <Setter Property="Window.WindowStyle" Value="None" />
    <Setter Property="Window.ShowInTaskbar" Value="False" />
    <Setter Property="Window.Topmost" Value="True" />
    <Setter Property="Width" Value="510" />
    <Setter Property="Window.SizeToContent" Value="Height" />
    <Setter Property="Window.ResizeMode" Value="NoResize" />
    <Setter Property="BorderThickness" Value="0,0,0,1" />
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="10" Opacity="0.3" ShadowDepth="0" />
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Window}">
          <Grid>
            <Border Background="{TemplateBinding Background}" BorderBrush="{DynamicResource WindowBorderBackground}" BorderThickness="1" Margin="10" CornerRadius="4">
              <AdornerDecorator>
                <ContentPresenter />
              </AdornerDecorator>
            </Border>
            <Border Margin="10" Height="45" VerticalAlignment="Top" Background="#00FFFFFF" BorderBrush="{DynamicResource DividerColorPrimary}" BorderThickness="{TemplateBinding BorderThickness}">
              <Grid Background="#00FFFFFF" HorizontalAlignment="Stretch">
                <TextBlock FontSize="16" Foreground="{DynamicResource TextColorPrimary}" Margin="14,0,50,0" VerticalAlignment="Center" FontWeight="Bold" TextTrimming="CharacterEllipsis" Text="{TemplateBinding Title}" />
                <Button Name="CloseButton" HorizontalAlignment="Right" VerticalAlignment="Top" Width="45" Height="45" Cursor="Hand" Style="{StaticResource closeButtonStyle}">
                  <Grid Width="24" Height="24" Background="#00FFFFFF">
                    <Polygon Name="x" Fill="{DynamicResource TextColorPrimary}" Margin="11,0,0,0" Points="{Binding Path=Points, Source={StaticResource ic_svg_polygon_close}}" />
                  </Grid>
                </Button>
                <Grid Name="DragGrid" Margin="0,0,45,0" Background="#00FFFFFF" />
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="CloseButton" Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="x" Property="Shape.Fill" Value="#FFFFFFFF" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SettingTextStyle" TargetType="{x:Type TextBox}">
    <Setter Property="Width" Value="128" />
    <Setter Property="Height" Value="30" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="FontSize" Value="14" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="4,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border Name="border" BorderBrush="{DynamicResource TextBorderColor}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ScrollViewer Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Value="{DynamicResource TextDisableBackground}" Property="Background" />
              <Setter Value="{DynamicResource TextDisableColor}" Property="Foreground" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
              <Setter Property="Background" Value="#00FFFFFF" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="border" Value="{DynamicResource PrimaryColor}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="True">
              <Setter TargetName="border" Value="{DynamicResource PrimaryColor}" Property="Border.BorderBrush" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Height" Value="32" />
    <Setter Property="Width" Value="100" />
    <Setter Property="FontSize" Value="13" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="BorderBrush" Value="#00FFFFFF" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid Name="templateRoot" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" Width="{TemplateBinding Width}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition MinWidth="{DynamicResource SystemParameters.VerticalScrollBarWidthKey}" />
            </Grid.ColumnDefinitions>
            <Border Name="ViewBorder" Grid.ColumnSpan="2" BorderThickness="1" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource DividerColorPrimary}" CornerRadius="4" />
            <Popup Name="PART_Popup" AllowsTransparency="True" HorizontalAlignment="Stretch" Grid.Column="0" Grid.ColumnSpan="2" Placement="Center" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
              <Popup.VerticalOffset>
                <MultiBinding Converter="{StaticResource PopupVeticalOffsetConverter}">
                  <Binding ElementName="DropDownScrollViewer" Path="ActualHeight" />
                  <Binding ElementName="ViewBorder" Path="Height" />
                </MultiBinding>
              </Popup.VerticalOffset>
              <ContentControl Style="{DynamicResource PopupContentStyle}" MinWidth="50">
                <ScrollViewer Name="DropDownScrollViewer" MaxHeight="250" Style="{StaticResource for_scrollviewer}" Width="{Binding ActualWidth, ElementName=templateRoot, Converter={StaticResource ComoBoxMinWidth}}">
                  <Grid Name="grid" RenderOptions.ClearTypeHint="Enabled">
                    <Canvas Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                      <Rectangle Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
                    </Canvas>
                    <ItemsPresenter Name="ItemsPresenter" Margin="0" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  </Grid>
                </ScrollViewer>
              </ContentControl>
            </Popup>
            <ToggleButton Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Foreground="{DynamicResource TextColorPrimary}" Grid.Column="0" Style="{StaticResource ComboBoxToggleButton}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <ContentPresenter Name="contentPresenter" Grid.ColumnSpan="2" Margin="10,0" Grid.Column="0" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="Stretch" IsHitTestVisible="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="ViewBorder" Value="{DynamicResource ButtonHoverColor}" Property="Border.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock TextTrimming="CharacterEllipsis" Text="{Binding}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ComboBoxItem}">
          <Setter Property="HorizontalContentAlignment" Value="Stretch" />
          <Setter Property="VerticalContentAlignment" Value="Center" />
          <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
          <Setter Property="Height" Value="32" />
          <Setter Property="FontSize" Value="13" />
          <Setter Property="Padding" Value="12,0" />
          <Setter Property="BorderThickness" Value="0" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                <Border Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" VerticalAlignment="Center" Height="{TemplateBinding Height}" SnapsToDevicePixels="True">
                  <ContentPresenter Name="Cp" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Border>
                <ControlTemplate.Triggers>
                  <Trigger Property="IsEnabled" Value="True">
                    <Setter TargetName="Bd" Property="Border.Background" Value="#00FFFFFF" />
                    <Setter TargetName="Bd" Value="{DynamicResource TextBorderColor}" Property="Border.BorderBrush" />
                  </Trigger>
                  <Trigger Property="UIElement.IsMouseOver" Value="True">
                    <Setter TargetName="Bd" Value="{DynamicResource ItemHoverColor}" Property="Border.Background" />
                    <Setter TargetName="Bd" Value="{DynamicResource ItemHoverColor}" Property="Border.BorderBrush" />
                  </Trigger>
                  <Trigger Property="ListBoxItem.IsSelected" Value="True">
                    <Setter TargetName="Cp" Value="{DynamicResource TextAccentColor}" Property="TextElement.Foreground" />
                  </Trigger>
                  <Trigger Property="ListBoxItem.IsSelected" Value="False">
                    <Setter TargetName="Cp" Value="{DynamicResource TextColorPrimary}" Property="TextElement.Foreground" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="EditTextStyle" TargetType="{x:Type TextBox}" BasedOn="{x:Null}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="TextBoxBase.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Padding" Value="10,0" />
    <Setter Property="UIElement.AllowDrop" Value="True" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border Background="{TemplateBinding Background}">
            <Border Name="bg" BorderBrush="{DynamicResource DividerColorPrimary}" BorderThickness="1">
              <ScrollViewer Name="PART_ContentHost" VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{DynamicResource for_scrollviewer}" />
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="True">
              <Setter TargetName="bg" Value="{DynamicResource PrimaryColor}" Property="Border.BorderBrush" />
              <Setter TargetName="bg" Value="{DynamicResource TextBoxBackground}" Property="Border.Background" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="False">
              <Setter TargetName="bg" Value="{DynamicResource DividerColorPrimary}" Property="Border.BorderBrush" />
              <Setter TargetName="bg" Property="Border.Background" Value="#00FFFFFF" />
            </Trigger>
            <Trigger Property="Text" Value="{x:Null}">
              <Setter TargetName="bg" Value="{DynamicResource HelpBrush}" Property="Border.Background" />
            </Trigger>
            <Trigger Property="Text" Value="">
              <Setter TargetName="bg" Value="{DynamicResource HelpBrush}" Property="Border.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Resources>
      <ResourceDictionary>
        <VisualBrush x:Key="HelpBrush" TileMode="None" Opacity="0.3" Stretch="None" AlignmentX="Left">
          <Brush.Transform>
            <TranslateTransform X="12" />
          </Brush.Transform>
          <VisualBrush.Visual>
            <TextBlock Text="" VerticalAlignment="Center" FontSize="14" />
          </VisualBrush.Visual>
        </VisualBrush>
        <Style x:Key="{x:Type Border}" TargetType="{x:Type Border}">
          <Setter Property="Border.CornerRadius" Value="4" />
          <Setter Property="Background" Value="#00FFFFFF" />
        </Style>
      </ResourceDictionary>
    </Style.Resources>
  </Style>
  <Style x:Key="HintTextStyle" TargetType="{x:Type TextBox}" BasedOn="{x:Null}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="UIElement.AllowDrop" Value="True" />
    <Setter Property="FontSize" Value="13" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Grid>
            <ScrollViewer Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            <TextBlock Name="hintText" Text="{TemplateBinding Tag}" Visibility="Collapsed" Style="{DynamicResource Body05}" FontSize="{TemplateBinding FontSize}" Margin="2,0" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Text" Value="{x:Null}">
              <Setter TargetName="hintText" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="Text" Value="">
              <Setter TargetName="hintText" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HintEditTextStyle" TargetType="{x:Type TextBox}" BasedOn="{x:Null}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Background" Value="{DynamicResource PopupBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource TextColorPrimary}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Padding" Value="6,0" />
    <Setter Property="UIElement.AllowDrop" Value="True" />
    <Setter Property="FontSize" Value="13" />
    <Setter Property="TextBoxBase.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border Name="bg" BorderBrush="{DynamicResource PrimaryColor}" BorderThickness="0" CornerRadius="4" Background="{DynamicResource TextBoxBackground}">
            <Grid>
              <ScrollViewer Name="PART_ContentHost" VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{DynamicResource for_scrollviewer}" />
              <TextBlock Name="hintText" Text="{TemplateBinding Tag}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalAlignment}" Style="{DynamicResource Body05}" Padding="10" FontSize="{TemplateBinding FontSize}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="True">
              <Setter TargetName="bg" Property="Border.BorderThickness" Value="1" />
              <Setter TargetName="bg" Property="Margin" Value="0" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="False">
              <Setter TargetName="bg" Property="Border.BorderThickness" Value="0" />
              <Setter TargetName="bg" Property="Margin" Value="1" />
            </Trigger>
            <Trigger Property="Text" Value="{x:Null}">
              <Setter TargetName="hintText" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="Text" Value="">
              <Setter TargetName="hintText" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BatchHintEditTextStyle" BasedOn="{StaticResource HintEditTextStyle}" TargetType="{x:Type TextBox}">
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
  </Style>
  <Style x:Key="isCompleteCheckBoxStyle" TargetType="{x:Type CheckBox}">
    <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}" />
    <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}" />
    <Setter Property="Foreground" Value="{DynamicResource SystemColors.ControlTextBrushKey}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
    <Setter Property="FrameworkElement.UseLayoutRounding" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Grid Name="templateRoot" Background="#00FFFFFF" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
              <Image Name="checkBoxBorderNone" Source="{DynamicResource checkbox01DrawingImage}" Opacity="0.36" />
              <Image Name="checkBoxBorderCheck" Source="{DynamicResource checkbox05DrawingImage}" Visibility="Collapsed" Opacity="0.18" />
            </Grid>
            <ContentPresenter Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="True">
              <Setter Property="Padding" Value="4,-1,0,0" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True" />
            <Trigger Property="IsEnabled" Value="False" />
            <Trigger Property="IsPressed" Value="True" />
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="checkBoxBorderCheck" Property="Visibility" Value="Visible" />
              <Setter TargetName="checkBoxBorderNone" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="{x:Null}">
              <Setter TargetName="checkBoxBorderCheck" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="checkBoxBorderNone" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="ToolTip.HasDropShadow" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolTip}">
          <Border Name="BD" Background="#D805080F" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" BorderThickness="0" CornerRadius="4">
            <UIElement.Effect>
              <DropShadowEffect Color="#000000" Opacity="0.12" BlurRadius="11" ShadowDepth="2" Direction="280" />
            </UIElement.Effect>
            <Grid Margin="12,10">
              <TextBlock Name="TB" Style="{DynamicResource Tag01}" Foreground="#FFFFFFFF" LineHeight="16" TextTrimming="CharacterEllipsis" Text="{TemplateBinding Content}" TextAlignment="Center" MaxWidth="150" TextWrapping="Wrap" />
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TransparentButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Background="{TemplateBinding Background}" Cursor="Hand">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ClickIconStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="Width" Value="20" />
    <Setter Property="Height" Value="20" />
    <Setter Property="Margin" Value="3,0" />
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border Name="bd" Style="{DynamicResource ClickIconBorderStyle}">
            <ContentPresenter Content="{TemplateBinding Content}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ClickIconBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.CornerRadius" Value="2" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource DividerColorPrimary}" />
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="False">
        <Setter Property="Background" Value="#00FFFFFF" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="CanSelectBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Height" Value="35" />
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource ItemHoverColor}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <BulletDecorator Background="#00FFFFFF" Cursor="Hand">
            <BulletDecorator.Bullet>
              <Grid Height="16" Width="16">
                <Border Name="RadioOuter" Background="#00FFFFFF" BorderBrush="{DynamicResource TextColorTertiary}" BorderThickness="1.5" CornerRadius="8" />
                <Border Name="RadioMark" CornerRadius="8" Margin="5" Background="{DynamicResource TextColorTertiary}" Visibility="Hidden" />
              </Grid>
            </BulletDecorator.Bullet>
            <TextBlock Name="Text" Margin="4,-1,0,0" Foreground="{DynamicResource TextColorPrimary}" FontSize="13" VerticalAlignment="Center">
              <ContentPresenter />
            </TextBlock>
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="RadioMark" Property="Visibility" Value="Visible" />
              <Setter TargetName="RadioOuter" Value="{DynamicResource PrimaryColor}" Property="Border.BorderBrush" />
              <Setter TargetName="RadioMark" Value="{DynamicResource PrimaryColor}" Property="Border.Background" />
              <Setter TargetName="Text" Value="{DynamicResource PrimaryColor}" Property="TextBlock.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>