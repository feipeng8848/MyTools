<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">


    <Style x:Key="ContextMenuStyle" TargetType="{x:Type ContextMenu}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />
        <Setter Property="ContextMenu.HasDropShadow" Value="True" />
        <Setter Property="MaxWidth" Value="250" />
        <Setter Property="Margin" Value="0,10" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border
                        Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderThickness="10">
                        <UIElement.Effect>
                            <DropShadowEffect
                                BlurRadius="10"
                                Opacity="0.2"
                                ShadowDepth="0" />
                        </UIElement.Effect>
                        <ScrollViewer Margin="0,8" Style="{DynamicResource for_scrollviewer}">
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <ControlTemplate x:Key="MenuItemItemControlTemplate" TargetType="{x:Type MenuItem}">
        <Border
            Name="templateRoot"
            Background="{DynamicResource PopupBackground}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="0"
            SnapsToDevicePixels="True">
            <Grid Name="Grid">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition
                        Width="Auto"
                        MinWidth="22"
                        SharedSizeGroup="MenuItemIconColumnGroup" />
                    <ColumnDefinition Width="0" />
                    <ColumnDefinition Width="*" MaxWidth="250" />
                    <ColumnDefinition Width="30" />
                    <ColumnDefinition
                        Width="Auto"
                        MaxWidth="250"
                        SharedSizeGroup="MenuItemIGTColumnGroup" />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <ContentPresenter
                    Name="Icon"
                    Width="16"
                    Height="16"
                    Margin="16,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Content="{TemplateBinding Icon}"
                    ContentSource="Icon"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <Border
                    Name="GlyphPanel"
                    Width="22"
                    Height="22"
                    Margin="-1,0,0,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Background="{DynamicResource PopupBackground}"
                    BorderBrush="{DynamicResource TextBorderColor}"
                    BorderThickness="0"
                    ClipToBounds="False"
                    Visibility="Hidden">
                    <Path
                        Name="Glyph"
                        Width="10"
                        Height="11"
                        Data="F1 M10,1.2 L4.7,9.1 L4.5,9.1 L0,5.2 L1.3,3.5 L4.3,6.1 L8.3,0 L10,1.2"
                        Fill="#FF000000"
                        FlowDirection="LeftToRight" />
                </Border>
                <ContentPresenter
                    Name="menuHeaderContainer"
                    Grid.Column="2"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Content="{TemplateBinding Header}"
                    ContentSource="Header"
                    ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                    ContentTemplate="{TemplateBinding HeaderTemplate}"
                    RecognizesAccessKey="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <TextBlock
                    Name="menuGestureText"
                    Grid.Column="4"
                    Margin="{TemplateBinding Padding}"
                    VerticalAlignment="Center"
                    Foreground="{DynamicResource TextColorPrimary}"
                    Text="{TemplateBinding InputGestureText}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="MenuItem.Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="MenuItem.IsChecked" Value="True">
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="True">
                <Setter TargetName="templateRoot" Property="Border.Background" Value="{DynamicResource ItemHoverColor}" />
                <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{DynamicResource ItemHoverColor}" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="#00FFFFFF" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.IsHighlighted" Value="True" />
                    <Condition Property="UIElement.IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Property="Border.Background" Value="{DynamicResource ItemHoverColor}" />
                <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{DynamicResource ItemHoverColor}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="MenuItemGroupControlTemplate" TargetType="{x:Type MenuItem}">
        <Border
            Name="templateRoot"
            Background="{DynamicResource PopupBackground}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            SnapsToDevicePixels="True">
            <Grid
                Name="Grid"
                Margin="-1"
                Background="#00FFFFFF">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition
                        Width="Auto"
                        MinWidth="22"
                        SharedSizeGroup="MenuItemIconColumnGroup" />
                    <ColumnDefinition Width="0" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="30" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                    <ColumnDefinition Width="25" />
                </Grid.ColumnDefinitions>
                <ContentPresenter
                    Name="Icon"
                    Width="16"
                    Height="16"
                    Margin="16,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Content="{TemplateBinding Icon}"
                    ContentSource="Icon"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <Border
                    Name="GlyphPanel"
                    Grid.Column="0"
                    Width="22"
                    Height="22"
                    Margin="-1,0,0,0"
                    VerticalAlignment="Center"
                    Background="#00FFFFFF"
                    BorderBrush="#00FFFFFF"
                    BorderThickness="1"
                    Visibility="Hidden">
                    <Path
                        Name="Glyph"
                        Width="9"
                        Height="11"
                        Data="F1 M10,1.2 L4.7,9.1 L4.5,9.1 L0,5.2 L1.3,3.5 L4.3,6.1 L8.3,0 L10,1.2"
                        Fill="{DynamicResource IconColorPrimary}"
                        FlowDirection="LeftToRight" />
                </Border>
                <ContentPresenter
                    Name="ContentPresenter"
                    Grid.Column="2"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Content="{TemplateBinding Header}"
                    ContentSource="Header"
                    ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                    ContentTemplate="{TemplateBinding HeaderTemplate}"
                    RecognizesAccessKey="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <TextBlock
                    Name="TextBlock"
                    Grid.Column="4"
                    Margin="{TemplateBinding Padding}"
                    VerticalAlignment="Center"
                    Opacity="0.7"
                    Text="{TemplateBinding InputGestureText}" />
                <Path
                    Name="RightArrow"
                    Grid.Column="5"
                    Margin="10,0,5,0"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Data="M0,0 L4,3.5 L0,7"
                    Fill="{DynamicResource IconColorPrimary}" />
                <Popup
                    Name="PART_Popup"
                    Grid.Column="0"
                    AllowsTransparency="True"
                    Focusable="False"
                    HorizontalOffset="{Binding ActualWidth, ConverterParameter=@VALUE-10, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MathConverter}}"
                    IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Relative"
                    PopupAnimation="{DynamicResource SystemParameters.MenuPopupAnimationKey}"
                    VerticalOffset="-10">
                    <Border
                        Name="SubMenuBorder"
                        Background="{DynamicResource Transparent}"
                        BorderThickness="1">
                        <UIElement.Effect>
                            <DropShadowEffect
                                BlurRadius="6"
                                Opacity="0.2"
                                ShadowDepth="0" />
                        </UIElement.Effect>
                        <ScrollViewer
                            Name="SubMenuScrollViewer"
                            Margin="10"
                            Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
                                                                          TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid
                                Name="Grid1"
                                Background="{DynamicResource PopupBackground}"
                                RenderOptions.ClearTypeHint="Enabled">
                                <Canvas
                                    Name="Canvas"
                                    Width="0"
                                    Height="0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Top">
                                    <Rectangle
                                        Name="OpaqueRect"
                                        Width="{Binding ActualWidth, ElementName=SubMenuBorder}"
                                        Height="{Binding ActualHeight, ElementName=SubMenuBorder}"
                                        Fill="{Binding Background, ElementName=SubMenuBorder}" />
                                </Canvas>
                                <Rectangle
                                    Name="Rectangle"
                                    Width="1"
                                    HorizontalAlignment="Left"
                                    Fill="#00FFFFFF" />
                                <ItemsPresenter
                                    Name="ItemsPresenter"
                                    MaxWidth="250"
                                    Grid.IsSharedSizeScope="True"
                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                    KeyboardNavigation.TabNavigation="Cycle"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="True">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="MenuItem.Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="MenuItem.IsChecked" Value="True">
                <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="True">
                <Setter TargetName="templateRoot" Property="Border.Background" Value="{DynamicResource ItemHoverColor}" />
                <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="{DynamicResource ItemHoverColor}" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{DynamicResource TextColorPrimary}" />
            </Trigger>
            <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="False">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>



    <Style x:Key="for_normal_window" TargetType="{x:Type Window}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid>
                        <Border
                            Padding="{TemplateBinding Margin}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="5"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="for_max_window" TargetType="{x:Type Window}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid Margin="{Binding Converter={StaticResource MaxWindowMarginConverter}}">
                        <ContentPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="normalButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource TitleBarIconColor}" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Name="PART_Background"
                        Background="#00FFFFFF"
                        BorderThickness="0">
                        <ContentPresenter
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="PART_Background" Property="Border.Background" Value="#0F05080F" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PART_Background" Property="Border.Background" Value="#2E05080F" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="TitleButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource TitleBarIconColor}" />
        <Setter Property="FrameworkElement.Cursor" Value="Hand" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Name="PART_Background"
                        Background="#00FFFFFF"
                        BorderThickness="0">
                        <ContentPresenter
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="closeButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource IconColorSecondary}" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Name="PART_Background"
                        Background="#00FFFFFF"
                        BorderThickness="0">
                        <ContentPresenter
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="PART_Background" Property="Border.Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="#ff0039" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0.0" Color="White" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PART_Background" Property="Border.Background">
                                <Setter.Value>
                                    <SolidColorBrush Opacity="0.75" Color="#ff0039" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0.0" Color="White" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="HoverButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Foreground" Value="#00FFFFFF" />
        <Setter Property="FrameworkElement.Tag" Value="4" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FrameworkElement.Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Tag,
                                                       Converter={StaticResource TagCornerConverter}}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ButtonHoverColor}" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="False">
                <Setter Property="Background" Value="#00FFFFFF" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="CaneldarTodayButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource ButtonHoverColor}" />
        <Setter Property="Foreground" Value="#00FFFFFF" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Width" Value="60" />
        <Setter Property="Height" Value="28" />
        <Setter Property="FrameworkElement.Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{DynamicResource DividerColorPrimary}"
                        BorderThickness="1">
                        <Grid>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Border.Background" Value="{DynamicResource CalendarButtonHoverColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="WidgetCalendarButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Foreground" Value="{DynamicResource DividerColorPrimary}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FrameworkElement.Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{DynamicResource DividerColorPrimary}"
                        BorderThickness="0">
                        <Grid>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Border
                                Name="cover"
                                Background="{DynamicResource ItemHoverColor}"
                                CornerRadius="2"
                                Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="cover" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="SetDateButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Background" Value="{DynamicResource SetDateButtonDefaultColor}" />
        <Setter Property="Height" Value="28" />
        <Setter Property="FrameworkElement.Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                            Height="{TemplateBinding Height}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="0"
                            CornerRadius="2" />
                        <Border
                            BorderBrush="{DynamicResource ButtonBorderPrimary}"
                            BorderThickness="1"
                            CornerRadius="2" />
                        <ContentPresenter
                            Margin="8,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                        <Border
                            Name="cover"
                            Background="{DynamicResource ButtonHoverColor}"
                            CornerRadius="2"
                            Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="cover" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="CancelButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Background" Value="{DynamicResource CancelBackground}" />
        <Setter Property="Height" Value="32" />
        <Setter Property="FrameworkElement.Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                            Height="{TemplateBinding Height}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="0"
                            CornerRadius="2" />
                        <Border
                            BorderBrush="{DynamicResource ButtonBorderPrimary}"
                            BorderThickness="{DynamicResource ButtonBorderThickness}"
                            CornerRadius="2" />
                        <ContentPresenter
                            Margin="8,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                        <Border
                            Name="cover"
                            Background="{DynamicResource ButtonHoverColor}"
                            CornerRadius="2"
                            Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="cover" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="SaveButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Background" Value="{DynamicResource PrimaryColor}" />
        <Setter Property="Height" Value="32" />
        <Setter Property="FrameworkElement.Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="#FFFFFFFF" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                            Height="{TemplateBinding Height}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="0"
                            CornerRadius="2" />
                        <Border
                            BorderBrush="{DynamicResource PopupBorderPrimary}"
                            BorderThickness="{DynamicResource ButtonBorderThickness}"
                            CornerRadius="2" />
                        <ContentPresenter
                            Margin="8,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                        <Border
                            Name="cover"
                            Background="{DynamicResource ButtonHoverColor}"
                            CornerRadius="2"
                            Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="cover" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="UIElement.Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.54" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="SetButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Height" Value="28" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{DynamicResource TextBorderColor}">
                        <Grid>
                            <ContentPresenter
                                Margin="0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center" />
                            <Border
                                Name="cover"
                                Background="{DynamicResource ButtonHoverColor}"
                                CornerRadius="2"
                                Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="cover" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style
        x:Key="CancelButtonStyle2"
        BasedOn="{StaticResource CancelButtonStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Height" Value="28" />
        <Setter Property="Width" Value="86" />
    </Style>


    <Style
        x:Key="SaveButtonStyle2"
        BasedOn="{StaticResource SaveButtonStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Height" Value="28" />
        <Setter Property="Width" Value="86" />
    </Style>


    <Style x:Key="NormalButton" TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Height" Value="32" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FrameworkElement.Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{DynamicResource TextBorderColor}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4">
                        <ContentPresenter
                            Margin="0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ItemHoverColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="SimpleBtn" TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Height" Value="30" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FrameworkElement.Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground_DarkColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{DynamicResource PrimaryColor_Main}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4">
                        <ContentPresenter
                            Margin="10,3,10,3"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource PrimaryColor_Main}" />
                <Setter Property="Foreground" Value="{DynamicResource Foreground_LightColor}" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseCaptured" Value="True">
                <Setter Property="Opacity" Value="0.8" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="SettingsButton" TargetType="{x:Type Button}">
        <Setter Property="MinWidth" Value="88" />
        <Setter Property="MinHeight" Value="28" />
        <Setter Property="FrameworkElement.Cursor" Value="Hand" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        MinWidth="{TemplateBinding MinWidth}"
                        MinHeight="{TemplateBinding MinHeight}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Background="{DynamicResource PopupBackground}"
                        BorderBrush="{DynamicResource DividerColorPrimary}"
                        BorderThickness="1"
                        CornerRadius="4">
                        <TextBlock
                            MaxWidth="160"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            FontFamily="{TemplateBinding FontFamily}"
                            FontSize="13"
                            Foreground="{DynamicResource TextColorPrimary}"
                            Text="{TemplateBinding Content}"
                            TextTrimming="CharacterEllipsis" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="NoneButton" TargetType="{x:Type Button}">
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        MinWidth="{TemplateBinding MinWidth}"
                        MinHeight="{TemplateBinding MinHeight}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Background="{DynamicResource PopupBackground}"
                        BorderBrush="#FFFFFFFF">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="TokenButton" TargetType="{x:Type Button}">
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        MinWidth="{TemplateBinding MinWidth}"
                        MinHeight="{TemplateBinding MinHeight}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0"
                        CornerRadius="4">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="TransparentButton" TargetType="{x:Type Button}">
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        MinWidth="{TemplateBinding MinWidth}"
                        MinHeight="{TemplateBinding MinHeight}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="4,1" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="BorderBrush" Value="#00FFFFFF" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border
                        Name="Bd"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderThickness="0"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource SystemColors.GrayTextBrushKey}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="False" />
                                <Condition Property="UIElement.IsMouseOver" Value="True" />
                                <Condition Property="UIElement.IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource TextAccentColor}" />
                            <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{DynamicResource TextAccentColor}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                                <Condition Property="UIElement.IsMouseOver" Value="False" />
                                <Condition Property="UIElement.IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Border.Background" Value="#FFFFFFFF" />
                            <Setter TargetName="Bd" Property="Border.BorderBrush" Value="#FFFFFFFF" />
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource PrimaryColor}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                                <Condition Property="UIElement.IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource TextAccentColor}" />
                            <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{DynamicResource TextAccentColor}" />
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="#FFFFFFFF" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                                <Condition Property="UIElement.IsMouseOver" Value="False" />
                                <Condition Property="UIElement.IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Border.Background" Value="#FFFFFFFF" />
                            <Setter TargetName="Bd" Property="Border.BorderBrush" Value="#FFFFFFFF" />
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource PrimaryColor}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="False" />
                                <Condition Property="UIElement.IsMouseOver" Value="True" />
                                <Condition Property="UIElement.IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource TextAccentColor}" />
                            <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{DynamicResource TextAccentColor}" />
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="#FFFFFFFF" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070" />


    <Style x:Key="SimpleCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextColorTertiary}" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Setter Property="FrameworkElement.UseLayoutRounding" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid
                        Name="templateRoot"
                        Background="#00FFFFFF"
                        SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <Path
                                Name="checkBoxBorderNone"
                                Data="{Binding Path=Data, Source={StaticResource ic_svg_path_checkbox_none}}"
                                Fill="{TemplateBinding BorderBrush}"
                                Stretch="Uniform" />
                            <Path
                                Name="checkBoxBorderCheck"
                                Data="{Binding Path=Data, Source={StaticResource ic_svg_path_checkbox_checkd}}"
                                Fill="{DynamicResource TextColorSubPrimary}"
                                Opacity="0"
                                Stretch="Uniform" />
                        </Grid>
                        <ContentPresenter
                            Name="contentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="True" />
                        <Trigger Property="IsEnabled" Value="False" />
                        <Trigger Property="IsPressed" Value="True" />
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="checkBoxBorderCheck" Property="UIElement.Opacity" Value="0.56" />
                            <Setter TargetName="checkBoxBorderNone" Property="UIElement.Opacity" Value="0" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="{x:Null}">
                            <Setter TargetName="checkBoxBorderCheck" Property="UIElement.Opacity" Value="0.56" />
                            <Setter TargetName="checkBoxBorderNone" Property="UIElement.Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="BlueSwitchCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource SystemColors.WindowTextBrushKey}" />
        <Setter Property="Background" Value="{DynamicResource SystemColors.WindowBrushKey}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <FrameworkTemplate.Resources>
                        <ResourceDictionary>
                            <Storyboard x:Key="OnChecking">
                                <DoubleAnimation
                                    Storyboard.TargetName="slider"
                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"
                                    From="24"
                                    To="24"
                                    Duration="00:00:0.1" />
                            </Storyboard>
                            <Storyboard x:Key="OnUnchecking">
                                <DoubleAnimation
                                    Storyboard.TargetName="slider"
                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"
                                    From="0"
                                    To="0"
                                    Duration="00:00:0.1" />
                            </Storyboard>
                        </ResourceDictionary>
                    </FrameworkTemplate.Resources>
                    <DockPanel Name="dockPanel">
                        <ContentPresenter
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Grid>
                            <Border
                                Name="BackgroundBorder"
                                Width="44"
                                Height="20"
                                CornerRadius="10">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0" Color="#FFC7C7C7" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                            <Border
                                Name="slider"
                                Height="12"
                                Margin="4,0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                BorderBrush="#FF939393"
                                BorderThickness="0">
                                <UIElement.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="0" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </UIElement.RenderTransform>
                                <Ellipse
                                    Width="12"
                                    Height="12"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Fill="#FFFFFFFF"
                                    Stroke="#FFFFFFFF"
                                    StrokeThickness="2" />
                            </Border>
                        </Grid>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <TriggerBase.ExitActions>
                                <BeginStoryboard Name="OnUnchecking_BeginStoryboard" Storyboard="{StaticResource OnUnchecking}" />
                            </TriggerBase.ExitActions>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Name="OnChecking_BeginStoryboard" Storyboard="{StaticResource OnChecking}" />
                            </TriggerBase.EnterActions>
                            <Setter TargetName="BackgroundBorder" Property="Border.Background" Value="{DynamicResource PrimaryColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Rectangle
                            Name="rect"
                            Fill="{DynamicResource ScrollBarColor}"
                            Opacity="0.65"
                            RadiusX="2"
                            RadiusY="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="rect" Property="UIElement.Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="HorizontalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="UIElement.Opacity" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Fill="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="VerticalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="UIElement.Opacity" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Fill="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="for_scrollbar" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Margin" Value="1" />
        <Setter Property="Width" Value="8" />
        <Setter Property="MinWidth" Value="8" />
        <Setter Property="UIElement.Opacity" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid Name="Bg" SnapsToDevicePixels="True">
                        <Track
                            Name="PART_Track"
                            IsDirectionReversed="True"
                            IsEnabled="{TemplateBinding IsMouseOver}">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource VerticalScrollBarPageButton}" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource VerticalScrollBarPageButton}" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumb}" />
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
                <Setter Property="Background" Value="#00FFFFFF" />
                <Setter Property="Margin" Value="1,0,6,1" />
                <Setter Property="Height" Value="10" />
                <Setter Property="MinHeight" Value="10" />
                <Setter Property="Width" Value="Auto" />
                <Setter Property="UIElement.Opacity" Value="0.8" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid Name="Bg" SnapsToDevicePixels="True">
                                <Track Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource HorizontalScrollBarPageButton}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource HorizontalScrollBarPageButton}" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumb}" />
                                    </Track.Thumb>
                                </Track>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="for_scrollviewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalOnly" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <ScrollContentPresenter
                            Margin="{TemplateBinding Padding}"
                            CanContentScroll="True"
                            CanHorizontallyScroll="False"
                            CanVerticallyScroll="False"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Cursor="{TemplateBinding Cursor}"
                            VirtualizingPanel.IsVirtualizing="True"
                            VirtualizingPanel.VirtualizationMode="Recycling" />
                        <ScrollBar
                            Name="PART_VerticalScrollBar"
                            HorizontalAlignment="Right"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            Orientation="Vertical"
                            Style="{StaticResource for_scrollbar}"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            VirtualizingPanel.IsVirtualizing="True"
                            VirtualizingPanel.VirtualizationMode="Recycling"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                            Value="{TemplateBinding VerticalOffset}" />
                        <ScrollBar
                            Name="PART_HorizontalScrollBar"
                            VerticalAlignment="Bottom"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            Orientation="Horizontal"
                            Style="{StaticResource for_scrollbar}"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            VirtualizingPanel.IsVirtualizing="True"
                            VirtualizingPanel.VirtualizationMode="Recycling"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                            Value="{TemplateBinding HorizontalOffset}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="ScrollChanged">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:0.5" />
                                    <DoubleAnimation
                                        BeginTime="0:0:1"
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="0:0:0.5" />
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:0.5" />
                                    <DoubleAnimation
                                        BeginTime="0:0:1"
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="0:0:0.5" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseEnter" SourceName="PART_VerticalScrollBar">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:0.5" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave" SourceName="PART_VerticalScrollBar">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        BeginTime="0:0:1"
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="0:0:0.5" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseEnter" SourceName="PART_HorizontalScrollBar">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:0.5" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave" SourceName="PART_HorizontalScrollBar">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        BeginTime="0:0:1"
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="0:0:0.5" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="CalendarStyle1" TargetType="{x:Type Calendar}">
        <Setter Property="Foreground" Value="#FF333333" />
        <Setter Property="Background" Value="#FFFFFFFF" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <StackPanel Name="PART_Root" HorizontalAlignment="Center">
                        <CalendarItem
                            Name="PART_CalendarItem"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Style="{TemplateBinding CalendarItemStyle}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Calendar.CalendarItemStyle" Value="{DynamicResource CalendarItemStyle1}" />
        <Setter Property="Calendar.CalendarDayButtonStyle" Value="{DynamicResource CalendarDayButtonStyle1}" />
    </Style>


    <Style x:Key="CalendarItemStyle1" TargetType="{x:Type CalendarItem}">
        <Setter Property="Margin" Value="0,3,0,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarItem}">
                    <FrameworkTemplate.Resources>
                        <ResourceDictionary>
                            <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
                                <TextBlock
                                    Margin="0,6,0,6"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    FontSize="12"
                                    Foreground="{DynamicResource TextColorSecondary}"
                                    Text="{Binding}" />
                            </DataTemplate>
                        </ResourceDictionary>
                    </FrameworkTemplate.Resources>
                    <Grid Name="PART_Root">
                        <FrameworkElement.Resources>
                            <ResourceDictionary>
                                <SolidColorBrush x:Key="DisabledColor" Color="#A5FFFFFF" />
                            </ResourceDictionary>
                        </FrameworkElement.Resources>
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="1">
                            <Border
                                BorderBrush="#FFFFFFFF"
                                BorderThickness="2"
                                CornerRadius="1">
                                <Grid>
                                    <FrameworkElement.Resources>
                                        <ResourceDictionary>
                                            <ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type Button}">
                                                <Grid Cursor="Hand">
                                                    <Rectangle
                                                        Fill="#11E5EBF1"
                                                        Opacity="1"
                                                        Stretch="Fill" />
                                                    <Grid>
                                                        <Path
                                                            Name="path"
                                                            Width="6"
                                                            Height="10"
                                                            Margin="14,-6,0,0"
                                                            HorizontalAlignment="Left"
                                                            VerticalAlignment="Center"
                                                            Data="M288.75,232.25 L288.75,240.625 L283,236.625"
                                                            Fill="#A3A3A3"
                                                            Stretch="Fill" />
                                                    </Grid>
                                                    <VisualStateManager.VisualStateGroups>
                                                        <VisualStateGroup x:Name="CommonStates">
                                                            <VisualState x:Name="Normal" />
                                                            <VisualState x:Name="MouseOver">
                                                                <Storyboard>
                                                                    <ColorAnimation
                                                                        Storyboard.TargetName="path"
                                                                        Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
                                                                        To="#FF757575"
                                                                        Duration="0" />
                                                                </Storyboard>
                                                            </VisualState>
                                                            <VisualState x:Name="Disabled">
                                                                <Storyboard>
                                                                    <DoubleAnimation
                                                                        Storyboard.TargetName="path"
                                                                        Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)"
                                                                        To=".5"
                                                                        Duration="0" />
                                                                </Storyboard>
                                                            </VisualState>
                                                        </VisualStateGroup>
                                                    </VisualStateManager.VisualStateGroups>
                                                </Grid>
                                            </ControlTemplate>
                                            <ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type Button}">
                                                <Grid Cursor="Hand">
                                                    <Rectangle
                                                        Fill="#11E5EBF1"
                                                        Opacity="1"
                                                        Stretch="Fill" />
                                                    <Grid>
                                                        <Path
                                                            Name="path"
                                                            Width="6"
                                                            Height="10"
                                                            Margin="0,-6,14,0"
                                                            HorizontalAlignment="Right"
                                                            VerticalAlignment="Center"
                                                            Data="M282.875,231.875 L282.875,240.375 L288.625,236"
                                                            Fill="#A3A3A3"
                                                            Stretch="Fill" />
                                                    </Grid>
                                                    <VisualStateManager.VisualStateGroups>
                                                        <VisualStateGroup x:Name="CommonStates">
                                                            <VisualState x:Name="Normal" />
                                                            <VisualState x:Name="MouseOver">
                                                                <Storyboard>
                                                                    <ColorAnimation
                                                                        Storyboard.TargetName="path"
                                                                        Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
                                                                        To="#FF757575"
                                                                        Duration="0" />
                                                                </Storyboard>
                                                            </VisualState>
                                                            <VisualState x:Name="Disabled">
                                                                <Storyboard>
                                                                    <DoubleAnimation
                                                                        Storyboard.TargetName="path"
                                                                        Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)"
                                                                        To=".5"
                                                                        Duration="0" />
                                                                </Storyboard>
                                                            </VisualState>
                                                        </VisualStateGroup>
                                                    </VisualStateManager.VisualStateGroups>
                                                </Grid>
                                            </ControlTemplate>
                                            <ControlTemplate x:Key="HeaderButtonTemplate" TargetType="{x:Type Button}">
                                                <Grid Cursor="Hand">
                                                    <ContentPresenter
                                                        Name="buttonContent"
                                                        Margin="1,4,1,9"
                                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                        Content="{TemplateBinding Content}"
                                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                                        TextElement.FontSize="12"
                                                        TextElement.FontWeight="Normal"
                                                        TextElement.Foreground="{DynamicResource TextColorSecondary}" />
                                                    <VisualStateManager.VisualStateGroups>
                                                        <VisualStateGroup x:Name="CommonStates">
                                                            <VisualState x:Name="Normal" />
                                                            <VisualState x:Name="MouseOver">
                                                                <Storyboard>
                                                                    <ColorAnimation
                                                                        Storyboard.TargetName="buttonContent"
                                                                        Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                                                        To="#FF757575"
                                                                        Duration="0" />
                                                                </Storyboard>
                                                            </VisualState>
                                                            <VisualState x:Name="Disabled">
                                                                <Storyboard>
                                                                    <DoubleAnimation
                                                                        Storyboard.TargetName="buttonContent"
                                                                        Storyboard.TargetProperty="Opacity"
                                                                        To=".5"
                                                                        Duration="0" />
                                                                </Storyboard>
                                                            </VisualState>
                                                        </VisualStateGroup>
                                                    </VisualStateManager.VisualStateGroups>
                                                </Grid>
                                            </ControlTemplate>
                                        </ResourceDictionary>
                                    </FrameworkElement.Resources>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                    <Button
                                        Name="PART_PreviousButton"
                                        Grid.Row="0"
                                        Grid.Column="0"
                                        Width="28"
                                        Height="20"
                                        HorizontalAlignment="Left"
                                        Focusable="False"
                                        Template="{DynamicResource PreviousButtonTemplate}" />
                                    <Button
                                        Name="PART_HeaderButton"
                                        Grid.Row="0"
                                        Grid.Column="1"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Focusable="False"
                                        FontSize="10.5"
                                        FontWeight="Bold"
                                        Template="{DynamicResource HeaderButtonTemplate}" />
                                    <Button
                                        Name="PART_NextButton"
                                        Grid.Row="0"
                                        Grid.Column="2"
                                        Width="28"
                                        Height="20"
                                        HorizontalAlignment="Right"
                                        Focusable="False"
                                        Template="{DynamicResource NextButtonTemplate}" />
                                    <Grid
                                        Name="PART_MonthView"
                                        Margin="6,-1,6,6"
                                        HorizontalAlignment="Center"
                                        ColumnSpan="3"
                                        Row="1"
                                        Visibility="Visible">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                    </Grid>
                                    <Grid
                                        Name="PART_YearView"
                                        Margin="6,-3,7,6"
                                        HorizontalAlignment="Center"
                                        ColumnSpan="3"
                                        Row="1"
                                        Visibility="Hidden">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                    </Grid>
                                </Grid>
                            </Border>
                        </Border>
                        <Rectangle
                            Name="PART_DisabledVisual"
                            Fill="{DynamicResource DisabledColor}"
                            Opacity="0"
                            RadiusX="2"
                            RadiusY="2"
                            Stretch="Fill"
                            Stroke="{DynamicResource DisabledColor}"
                            StrokeThickness="1"
                            Visibility="Collapsed" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="PART_DisabledVisual"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_DisabledVisual" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Year">
                            <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Decade">
                            <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="CalendarDayButtonStyle1" TargetType="{x:Type CalendarDayButton}">
        <Setter Property="MinWidth" Value="5" />
        <Setter Property="MinHeight" Value="5" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarDayButton}">
                    <Grid>
                        <Rectangle
                            Name="HoverBackground"
                            Width="26"
                            Height="26"
                            Fill="{DynamicResource ItemHoverColor}"
                            Opacity="0"
                            RadiusX="26"
                            RadiusY="26" />
                        <Rectangle
                            Name="SelectedBackground"
                            Width="26"
                            Height="26"
                            Fill="{DynamicResource PrimaryColor}"
                            Opacity="0"
                            RadiusX="26"
                            RadiusY="26" />
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter
                            Name="NormalText"
                            Margin="5,1,5,1"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            TextBlock.FontSize="12"
                            TextElement.Foreground="#FF262626" />
                        <Path
                            Name="Blackout"
                            Margin="3"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Data="M8.1772461,11.029181 L10.433105,11.029181 L11.700684,12.801641 L12.973633,11.029181 L15.191895,11.029181 L12.844727,13.999395 L15.21875,17.060919 L12.962891,17.060919 L11.673828,15.256231 L10.352539,17.060919 L8.1396484,17.060919 L10.519043,14.042364"
                            Fill="#FF000000"
                            Opacity="0"
                            RenderTransformOrigin="0.5,0.5"
                            Stretch="Fill" />
                        <Rectangle
                            Name="DayButtonFocusVisual"
                            IsHitTestVisible="False"
                            RadiusX="1"
                            RadiusY="1"
                            Stroke="#FF45D6FA"
                            Visibility="Collapsed" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal">
                                    <Storyboard />
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="HoverBackground"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="NormalText"
                                            Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                            To="White"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="NormalText"
                                            Storyboard.TargetProperty="Opacity"
                                            To=".35"
                                            Duration="0" />
                                        <ColorAnimation
                                            Storyboard.TargetName="NormalText"
                                            Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                            To="#FF989898"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="DayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="RegularDay" />
                                <VisualState x:Name="Today">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="NormalText"
                                            Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                            To="{DynamicResource primary_blue_100}"
                                            Duration="0" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="NormalText" Storyboard.TargetProperty="(TextElement.FontWeight)">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <ObjectKeyFrame.Value>
                                                    <FontWeight>Bold</FontWeight>
                                                </ObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="SelectedBackground"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1"
                                            Duration="0" />
                                        <ColorAnimation
                                            Storyboard.TargetName="NormalText"
                                            Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                            To="White"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Active">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="NormalText"
                                            Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                            To="#FF262626"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="NormalText"
                                            Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                            To="#FF989898"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="BlackoutDayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="NormalDay" />
                                <VisualState x:Name="BlackoutDay">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="Blackout"
                                            Storyboard.TargetProperty="Opacity"
                                            To=".2"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ButtonBase.ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        Name="templateRoot"
                        Background="#00FFFFFF"
                        BorderBrush="{DynamicResource TextBorderColor}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <Border
                            Name="splitBorder"
                            Width="{DynamicResource SystemParameters.VerticalScrollBarWidthKey}"
                            Margin="0,0,6,0"
                            HorizontalAlignment="Right"
                            BorderBrush="#00FFFFFF"
                            BorderThickness="1"
                            SnapsToDevicePixels="True">
                            <Path
                                Name="arrow"
                                Width="8"
                                Height="4"
                                Data="{Binding Path=Data, Source={StaticResource ic_svg_path_arrow}}"
                                Fill="{DynamicResource TextColorTertiary}"
                                Stretch="Fill" />
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="ListBox.SelectionMode" Value="Extended" />
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="ScrollViewer.PanningMode" Value="None" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListViewItem}">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border
                        Name="Bd"
                        Background="{TemplateBinding Background}"
                        BorderBrush="#00FFFFFF"
                        BorderThickness="0"
                        SnapsToDevicePixels="True">
                        <ScrollViewer
                            Padding="{TemplateBinding Padding}"
                            Style="{StaticResource for_scrollviewer}"
                            VirtualizingPanel.IsVirtualizing="True">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ItemsControl.IsGrouping" Value="True" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ReadOnlyText" TargetType="{x:Type TextBox}">
        <Setter Property="BorderBrush" Value="#00FFFFFF" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="TextBoxBase.IsReadOnly" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="TextBox.TextWrapping" Value="Wrap" />
    </Style>


    <Style x:Key="TagPopupItemTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource PopupBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="Height" Value="35" />
        <Setter Property="FrameworkElement.Cursor" Value="Arrow" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="UIElement.AllowDrop" Value="True" />
        <Setter Property="TextBoxBase.IsReadOnly" Value="True" />
        <Setter Property="MaxWidth" Value="190" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border
                        Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0"
                        SnapsToDevicePixels="True">
                        <TextBlock
                            Margin="15,0"
                            VerticalAlignment="Center"
                            Foreground="{TemplateBinding Foreground}"
                            Text="{TemplateBinding Text}"
                            TextTrimming="CharacterEllipsis" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="TextBoxBase.IsInactiveSelectionHighlightEnabled" Value="True" />
                    <Condition Property="TextBoxBase.IsSelectionActive" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="TextBoxBase.SelectionBrush" Value="{DynamicResource SystemColors.InactiveSelectionHighlightBrushKey}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="PopupBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Border.CornerRadius" Value="5" />
        <Setter Property="Margin" Value="20" />
        <Setter Property="Background" Value="{DynamicResource PopupBackground}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="UIElement.Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="20"
                    Direction="270"
                    Opacity="0.20"
                    ShadowDepth="3" />
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="PopupBorderStyle1" TargetType="{x:Type Border}">
        <Setter Property="Border.CornerRadius" Value="5" />
        <Setter Property="Margin" Value="10" />
        <Setter Property="Background" Value="{DynamicResource PopupBackground}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="UIElement.Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="10"
                    Direction="270"
                    Opacity="0.20"
                    ShadowDepth="3" />
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="PopupInnerBorderStyle1" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource PopupBorderPrimary}" />
        <Setter Property="Background" Value="{DynamicResource PopupInnerBackground}" />
        <Setter Property="Margin" Value="10" />
        <Setter Property="Border.CornerRadius" Value="4" />
    </Style>


    <Style x:Key="PopupInnerBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource PopupBorderPrimary}" />
        <Setter Property="Background" Value="{DynamicResource PopupInnerBackground}" />
        <Setter Property="Margin" Value="20" />
        <Setter Property="Border.CornerRadius" Value="4" />
    </Style>


    <Style x:Key="PopupBorderLessBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource PopupBackground}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>


    <Style x:Key="PopupBorderLessInnerBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource PopupBorderPrimary}" />
        <Setter Property="Background" Value="{DynamicResource PopupInnerBackground}" />
    </Style>


    <Style x:Key="ToastBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="UIElement.Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="16"
                    Direction="270"
                    Opacity="0.25"
                    ShadowDepth="16" />
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="QuickAddWindowBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="UIElement.Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="32"
                    Direction="270"
                    Opacity="0.25"
                    ShadowDepth="16" />
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="PomoActiveBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="UIElement.Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="32"
                    Direction="270"
                    Opacity="0.25"
                    ShadowDepth="16" />
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="PomoNormalBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="UIElement.Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="12"
                    Direction="270"
                    Opacity="0.15"
                    ShadowDepth="6" />
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="HoverBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource DividerColorPrimary}" />
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Border.CornerRadius" Value="2" />
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource DividerColorPrimary}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="ListPathStyle" TargetType="{x:Type Path}">
        <Setter Property="MaxHeight" Value="15" />
        <Setter Property="MaxWidth" Value="15" />
        <Setter Property="Shape.Stretch" Value="Uniform" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>


    <Style x:Key="TaskListViewTitleStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="FontSize" Value="14" />
        <Style.Triggers>
            <Trigger Property="Text" Value="">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="TaskListViewTextBoxTitleStyle" TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="TextBox.MaxLines" Value="1" />
        <Setter Property="Height" Value="36" />
        <Setter Property="FrameworkElement.Cursor" Value="IBeam" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="10,0" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
    </Style>


    <Style x:Key="TaskListViewLineStyle" TargetType="{x:Type Line}">
        <Setter Property="Stroke" Value="{DynamicResource DividerColorPrimary}" />
        <Setter Property="Line.X1" Value="0" />
        <Setter Property="Line.X2" Value="10" />
        <Setter Property="Shape.Stretch" Value="Fill" />
        <Setter Property="UIElement.Opacity" Value="1" />
        <Setter Property="StrokeThickness" Value="1" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
    </Style>


    <Style x:Key="TaskPathStyle" TargetType="{x:Type Path}">
        <Setter Property="Height" Value="14" />
        <Setter Property="Width" Value="14" />
        <Setter Property="Shape.Stretch" Value="Uniform" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>


    <Style x:Key="TaskBottomPathStyle" TargetType="{x:Type Path}">
        <Setter Property="Height" Value="16" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Shape.Stretch" Value="Uniform" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>


    <Style x:Key="SettingTitleStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="Margin" Value="0,24,0,12" />
        <Setter Property="TextWrapping" Value="Wrap" />
    </Style>


    <Style x:Key="SettingSetStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="Margin" Value="0,20,0,0" />
    </Style>


    <Style x:Key="SettingUnitStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="13" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="Margin" Value="8,0,0,0" />
    </Style>


    <Style x:Key="SettingHintStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="13" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorTertiary}" />
        <Setter Property="Margin" Value="8,0,0,0" />
    </Style>


    <Style x:Key="PasswordTextStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="Height" Value="36" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="PasswordBox.CaretBrush" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="4,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border
                        Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{DynamicResource TextBorderColor}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4"
                        SnapsToDevicePixels="True">
                        <ScrollViewer
                            Name="PART_ContentHost"
                            Focusable="False"
                            HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource TextDisableBackground}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextDisableColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background" Value="#00FFFFFF" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Border.BorderBrush" Value="{DynamicResource PrimaryColor}" />
                        </Trigger>
                        <Trigger Property="UIElement.IsFocused" Value="True">
                            <Setter TargetName="border" Property="Border.BorderBrush" Value="{DynamicResource PrimaryColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ProjectTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource TextInverseColorPrimary}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="8" />
    </Style>


    <Style x:Key="IconTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource TextInverseColorSecondary}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="10" />
    </Style>


    <Style x:Key="ProjectIconStyle" TargetType="{x:Type Path}">
        <Setter Property="Fill" Value="{DynamicResource IconInverseColorPrimary}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Shape.Stretch" Value="Uniform" />
    </Style>


    <Style x:Key="ListButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Height" Value="32" />
        <Setter Property="FrameworkElement.Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <TextBlock
                            Margin="12,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            FontSize="13"
                            Foreground="{TemplateBinding Foreground}"
                            Text="{TemplateBinding Content}"
                            TextTrimming="CharacterEllipsis" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ItemHoverColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="HoverUnderlineStyle" TargetType="{x:Type TextBlock}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="TextDecorations" Value="Underline" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="GridHoverStyle" TargetType="{x:Type Grid}">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="Transparent" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ItemHoverColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="AppMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border
                        Height="32"
                        MinWidth="80"
                        Margin="0"
                        Background="#00FFFFFF">
                        <Grid>
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    ContentSource="Icon" />
                                <ContentPresenter
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    ContentSource="Header" />
                            </StackPanel>
                            <Border
                                Name="border"
                                Background="{TemplateBinding Background}"
                                Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="MenuSeparatorStyle" TargetType="{x:Type Separator}">
        <Setter Property="Margin" Value="0,6" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border
                        Height="1"
                        Background="{DynamicResource DividerColorPrimary}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="CustomWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="Window.AllowsTransparency" Value="True" />
        <Setter Property="BorderBrush" Value="#FFFFFFFF" />
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundPrimary}" />
        <Setter Property="Window.WindowStyle" Value="None" />
        <Setter Property="Window.ShowInTaskbar" Value="False" />
        <Setter Property="Window.Topmost" Value="True" />
        <Setter Property="Width" Value="510" />
        <Setter Property="Window.SizeToContent" Value="Height" />
        <Setter Property="Window.ResizeMode" Value="NoResize" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="UIElement.Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="10"
                    Opacity="0.3"
                    ShadowDepth="0" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid>
                        <Border
                            Margin="10"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource WindowBorderBackground}"
                            BorderThickness="1"
                            CornerRadius="4">
                            <AdornerDecorator>
                                <ContentPresenter />
                            </AdornerDecorator>
                        </Border>
                        <Border
                            Height="45"
                            Margin="10"
                            VerticalAlignment="Top"
                            Background="#00FFFFFF"
                            BorderBrush="{DynamicResource DividerColorPrimary}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid HorizontalAlignment="Stretch" Background="#00FFFFFF">
                                <TextBlock
                                    Margin="14,0,50,0"
                                    VerticalAlignment="Center"
                                    FontSize="16"
                                    FontWeight="Bold"
                                    Foreground="{DynamicResource TextColorPrimary}"
                                    Text="{TemplateBinding Title}"
                                    TextTrimming="CharacterEllipsis" />
                                <Button
                                    Name="CloseButton"
                                    Width="45"
                                    Height="45"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Top"
                                    Cursor="Hand"
                                    Style="{StaticResource closeButtonStyle}">
                                    <Grid
                                        Width="24"
                                        Height="24"
                                        Background="#00FFFFFF">
                                        <Polygon
                                            Name="x"
                                            Margin="11,0,0,0"
                                            Fill="{DynamicResource TextColorPrimary}"
                                            Points="{Binding Path=Points, Source={StaticResource ic_svg_polygon_close}}" />
                                    </Grid>
                                </Button>
                                <Grid
                                    Name="DragGrid"
                                    Margin="0,0,45,0"
                                    Background="#00FFFFFF" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="CloseButton" Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="x" Property="Shape.Fill" Value="#FFFFFFFF" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="SettingTextStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Width" Value="128" />
        <Setter Property="Height" Value="30" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="4,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border
                        Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{DynamicResource TextBorderColor}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4"
                        SnapsToDevicePixels="True">
                        <ScrollViewer
                            Name="PART_ContentHost"
                            Focusable="False"
                            HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource TextDisableBackground}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextDisableColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background" Value="#00FFFFFF" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Border.BorderBrush" Value="{DynamicResource PrimaryColor}" />
                        </Trigger>
                        <Trigger Property="UIElement.IsFocused" Value="True">
                            <Setter TargetName="border" Property="Border.BorderBrush" Value="{DynamicResource PrimaryColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="PopupContentStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="MinWidth" Value="122" />
        <Setter Property="Margin" Value="0,8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <Border Name="bd" Style="{DynamicResource PopupBorderStyle}" />
                        <Border MinWidth="{TemplateBinding MinWidth}" Style="{DynamicResource PopupInnerBorderStyle}">
                            <ContentPresenter Margin="{TemplateBinding Margin}" Content="{TemplateBinding Content}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Height" Value="32" />
        <Setter Property="Width" Value="100" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="BorderBrush" Value="#00FFFFFF" />
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid
                        Name="templateRoot"
                        Width="{TemplateBinding Width}"
                        HorizontalAlignment="Stretch"
                        SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition MinWidth="{DynamicResource SystemParameters.VerticalScrollBarWidthKey}" />
                        </Grid.ColumnDefinitions>
                        <Border
                            Name="ViewBorder"
                            Grid.ColumnSpan="2"
                            Height="{TemplateBinding Height}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource PrimaryColor_Main}"
                            BorderThickness="1"
                            CornerRadius="4" />
                        <Popup
                            Name="PART_Popup"
                            Grid.Column="0"
                            Grid.ColumnSpan="2"
                            HorizontalAlignment="Stretch"
                            AllowsTransparency="True"
                            IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Placement="Center">
                            <Popup.VerticalOffset>
                                <MultiBinding Converter="{StaticResource PopupVeticalOffsetConverter}">
                                    <Binding ElementName="DropDownScrollViewer" Path="ActualHeight" />
                                    <Binding ElementName="ViewBorder" Path="Height" />
                                </MultiBinding>
                            </Popup.VerticalOffset>
                            <ContentControl MinWidth="50" Style="{DynamicResource PopupContentStyle}">
                                <ScrollViewer
                                    Name="DropDownScrollViewer"
                                    Width="{Binding ActualWidth, ElementName=templateRoot, Converter={StaticResource ComoBoxMinWidth}}"
                                    MaxHeight="250"
                                    Style="{StaticResource for_scrollviewer}">
                                    <Grid Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas
                                            Name="canvas"
                                            Width="0"
                                            Height="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                            <Rectangle
                                                Name="opaqueRect"
                                                Width="{Binding ActualWidth, ElementName=dropDownBorder}"
                                                Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                                Fill="{Binding Background, ElementName=dropDownBorder}" />
                                        </Canvas>
                                        <ItemsPresenter
                                            Name="ItemsPresenter"
                                            Margin="0"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </ScrollViewer>
                            </ContentControl>
                        </Popup>
                        <ToggleButton
                            Name="toggleButton"
                            Grid.Column="0"
                            Grid.ColumnSpan="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Foreground="{DynamicResource TextColorPrimary}"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource ComboBoxToggleButton}" />
                        <ContentPresenter
                            Name="contentPresenter"
                            Grid.Column="0"
                            Grid.ColumnSpan="2"
                            Margin="10,0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            IsHitTestVisible="False"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="ViewBorder" Property="Border.Background" Value="{DynamicResource ButtonHoverColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" TextTrimming="CharacterEllipsis" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ComboBoxItem}">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
                    <Setter Property="Height" Value="32" />
                    <Setter Property="FontSize" Value="13" />
                    <Setter Property="Padding" Value="12,0" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                <Border
                                    Name="Bd"
                                    Height="{TemplateBinding Height}"
                                    Padding="{TemplateBinding Padding}"
                                    VerticalAlignment="Center"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="True">
                                    <ContentPresenter
                                        Name="Cp"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="True">
                                        <Setter TargetName="Bd" Property="Border.Background" Value="#00FFFFFF" />
                                        <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{DynamicResource TextBorderColor}" />
                                    </Trigger>
                                    <Trigger Property="UIElement.IsMouseOver" Value="True">
                                        <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource ItemHoverColor}" />
                                        <Setter TargetName="Bd" Property="Border.BorderBrush" Value="{DynamicResource ItemHoverColor}" />
                                    </Trigger>
                                    <Trigger Property="ListBoxItem.IsSelected" Value="True">
                                        <Setter TargetName="Cp" Property="TextElement.Foreground" Value="{DynamicResource TextAccentColor}" />
                                    </Trigger>
                                    <Trigger Property="ListBoxItem.IsSelected" Value="False">
                                        <Setter TargetName="Cp" Property="TextElement.Foreground" Value="{DynamicResource TextColorPrimary}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>


    <Style
        x:Key="EditTextStyle"
        BasedOn="{x:Null}"
        TargetType="{x:Type TextBox}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="TextBoxBase.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="UIElement.AllowDrop" Value="True" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Background="{TemplateBinding Background}">
                        <Border
                            Name="bg"
                            BorderBrush="{DynamicResource DividerColorPrimary}"
                            BorderThickness="1">
                            <ScrollViewer
                                Name="PART_ContentHost"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Style="{DynamicResource for_scrollviewer}"
                                VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsFocused" Value="True">
                            <Setter TargetName="bg" Property="Border.BorderBrush" Value="{DynamicResource PrimaryColor}" />
                            <Setter TargetName="bg" Property="Border.Background" Value="{DynamicResource TextBoxBackground}" />
                        </Trigger>
                        <Trigger Property="UIElement.IsFocused" Value="False">
                            <Setter TargetName="bg" Property="Border.BorderBrush" Value="{DynamicResource DividerColorPrimary}" />
                            <Setter TargetName="bg" Property="Border.Background" Value="#00FFFFFF" />
                        </Trigger>
                        <Trigger Property="Text" Value="{x:Null}">
                            <Setter TargetName="bg" Property="Border.Background" Value="{DynamicResource HelpBrush}" />
                        </Trigger>
                        <Trigger Property="Text" Value="">
                            <Setter TargetName="bg" Property="Border.Background" Value="{DynamicResource HelpBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <ResourceDictionary>
                <VisualBrush
                    x:Key="HelpBrush"
                    AlignmentX="Left"
                    Opacity="0.3"
                    Stretch="None"
                    TileMode="None">
                    <Brush.Transform>
                        <TranslateTransform X="12" />
                    </Brush.Transform>
                    <VisualBrush.Visual>
                        <TextBlock
                            VerticalAlignment="Center"
                            FontSize="14"
                            Text="" />
                    </VisualBrush.Visual>
                </VisualBrush>
                <Style x:Key="{x:Type Border}" TargetType="{x:Type Border}">
                    <Setter Property="Border.CornerRadius" Value="4" />
                    <Setter Property="Background" Value="#00FFFFFF" />
                </Style>
            </ResourceDictionary>
        </Style.Resources>
    </Style>


    <Style
        x:Key="HintTextStyle"
        BasedOn="{x:Null}"
        TargetType="{x:Type TextBox}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="UIElement.AllowDrop" Value="True" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <ScrollViewer Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <TextBlock
                            Name="hintText"
                            Margin="2,0"
                            FontSize="{TemplateBinding FontSize}"
                            Opacity="0.3"
                            Text="{TemplateBinding Tag}"
                            Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="{x:Null}">
                            <Setter TargetName="hintText" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Text" Value="">
                            <Setter TargetName="hintText" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style
        x:Key="HintEditTextStyle"
        BasedOn="{x:Null}"
        TargetType="{x:Type TextBox}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource PopupBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource TextColorPrimary}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="6,0" />
        <Setter Property="UIElement.AllowDrop" Value="True" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="TextBoxBase.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border
                        Name="bg"
                        Background="{DynamicResource TextBoxBackground}"
                        BorderBrush="{DynamicResource PrimaryColor_Main}"
                        BorderThickness="1"
                        CornerRadius="4">
                        <Grid>
                            <ScrollViewer
                                Name="PART_ContentHost"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Style="{DynamicResource for_scrollviewer}"
                                VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" />
                            <TextBlock
                                Name="hintText"
                                Padding="10"
                                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                FontSize="{TemplateBinding FontSize}"
                                Opacity="0.2"
                                Text="{TemplateBinding Tag}"
                                Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsFocused" Value="True">
                            <Setter TargetName="bg" Property="Border.BorderThickness" Value="1" />
                            <Setter TargetName="bg" Property="Margin" Value="0" />
                            <!--<Setter TargetName="bg" Property="Border.BorderBrush" Value="{DynamicResource PrimaryColor_Main}" />-->
                        </Trigger>
                        <Trigger Property="UIElement.IsFocused" Value="False">
                            <!--<Setter TargetName="bg" Property="Border.BorderBrush" Value="{DynamicResource Divider_Color_Dark}" />-->
                        </Trigger>
                        <Trigger Property="Text" Value="{x:Null}">
                            <Setter TargetName="hintText" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Text" Value="">
                            <Setter TargetName="hintText" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style
        x:Key="BatchHintEditTextStyle"
        BasedOn="{StaticResource HintEditTextStyle}"
        TargetType="{x:Type TextBox}">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
    </Style>


    <Style x:Key="isCompleteCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource SystemColors.ControlTextBrushKey}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Setter Property="FrameworkElement.UseLayoutRounding" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid
                        Name="templateRoot"
                        Background="#00FFFFFF"
                        SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <Image
                                Name="checkBoxBorderNone"
                                Opacity="0.36"
                                Source="{DynamicResource checkbox01DrawingImage}" />
                            <Image
                                Name="checkBoxBorderCheck"
                                Opacity="0.18"
                                Source="{DynamicResource checkbox05DrawingImage}"
                                Visibility="Collapsed" />
                        </Grid>
                        <ContentPresenter
                            Name="contentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="True" />
                        <Trigger Property="IsEnabled" Value="False" />
                        <Trigger Property="IsPressed" Value="True" />
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="checkBoxBorderCheck" Property="Visibility" Value="Visible" />
                            <Setter TargetName="checkBoxBorderNone" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="{x:Null}">
                            <Setter TargetName="checkBoxBorderCheck" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="checkBoxBorderNone" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="ToolTip.HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border
                        Name="BD"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Background="#D805080F"
                        BorderThickness="0"
                        CornerRadius="4">
                        <UIElement.Effect>
                            <DropShadowEffect
                                BlurRadius="11"
                                Direction="280"
                                Opacity="0.12"
                                ShadowDepth="2"
                                Color="#000000" />
                        </UIElement.Effect>
                        <Grid Margin="12,10">
                            <TextBlock
                                Name="TB"
                                MaxWidth="150"
                                Foreground="#FFFFFFFF"
                                LineHeight="16"
                                Style="{DynamicResource Tag01}"
                                Text="{TemplateBinding Content}"
                                TextAlignment="Center"
                                TextTrimming="CharacterEllipsis"
                                TextWrapping="Wrap" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="TransparentButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}" Cursor="Hand">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ClickIconStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Margin" Value="3,0" />
        <Setter Property="FrameworkElement.Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border Name="bd" Style="{DynamicResource ClickIconBorderStyle}">
                        <ContentPresenter Content="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ClickIconBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Border.CornerRadius" Value="2" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource DividerColorPrimary}" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="False">
                <Setter Property="Background" Value="#00FFFFFF" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="CanSelectBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Height" Value="35" />
        <Setter Property="FrameworkElement.Cursor" Value="Hand" />
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ItemHoverColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="Win10_SimpleRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator
                        Name="bulletDecorator"
                        Background="#00FFFFFF"
                        Cursor="Hand">
                        <BulletDecorator.Bullet>
                            <Grid Width="0" Height="0">
                                <!--<Border Name="RadioOuter" Background="#00FFFFFF" BorderBrush="{DynamicResource TextColorTertiary}" BorderThickness="1.5" CornerRadius="8" />
                                <Border Name="RadioMark" CornerRadius="8" Margin="5" Background="{DynamicResource TextColorTertiary}" Visibility="Hidden" />-->
                            </Grid>
                        </BulletDecorator.Bullet>
                        <TextBlock
                            Name="Text"
                            Margin="4"
                            VerticalAlignment="Center"
                            FontSize="16"
                            Foreground="{DynamicResource Foreground_DarkColor}"
                            TextDecorations="None">
                            <ContentPresenter />
                        </TextBlock>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <!--<Setter TargetName="RadioMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="RadioOuter" Value="{DynamicResource PrimaryColor}" Property="Border.BorderBrush" />
                            <Setter TargetName="RadioMark" Value="{DynamicResource PrimaryColor}" Property="Border.Background" />-->
                            <Setter TargetName="Text" Property="TextBlock.Foreground" Value="{DynamicResource Foreground_LightColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>